# Home Assistant Sungrow second inverter integration
# https://github.com/rcmlee99/sungrow-automation/tree/main/config_dualinverter
# last update: 2024-09-14
#
# Note: This YAML file will only work with Home Assistant >= 2023.10

modbus:
  - name: SungrowSHx2
    type: tcp
    host: !secret sungrow_modbus_host_ip2
    port: !secret sungrow_modbus_port2
    sensors:
      - name: Sungrow device type code2
        unique_id: sg_dev_code2
        device_address: !secret sungrow_modbus_slave2
        address: 4999 # reg 5000
        input_type: input
        data_type: uint16
        scan_interval: 600

      - name: Daily PV generation & battery discharge2
        unique_id: sg_daily_pv_gen_battery_discharge2
        device_address: !secret sungrow_modbus_slave2
        address: 5002 # reg 5003
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total PV generation & battery discharge2
        unique_id: sg_total_pv_gen_battery_discharge2
        device_address: !secret sungrow_modbus_slave2
        address: 5003 # reg 5004
        input_type: input
        data_type: uint32
        swap: word
        unit_of_measurement: kWh
        precision: 1
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Inverter temperature2
        unique_id: sg_inverter_temperature2
        device_address: !secret sungrow_modbus_slave2
        address: 5007 # reg 5008
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: °C
        device_class: Temperature
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: MPPT1 voltage2
        unique_id: sg_mppt1_voltage2
        device_address: !secret sungrow_modbus_slave2
        address: 5010 # reg 5011
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10
      - name: MPPT1 current2
        unique_id: sg_mppt1_current2
        device_address: !secret sungrow_modbus_slave2
        address: 5011 # reg 5012
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: MPPT2 voltage2
        unique_id: sg_mppt2_voltage2
        device_address: !secret sungrow_modbus_slave2
        address: 5012 # reg 5013
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: MPPT2 current2
        unique_id: sg_mppt2_current2
        device_address: !secret sungrow_modbus_slave2
        address: 5013 # reg 5014
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Total DC power2
        unique_id: sg_total_dc_power2
        device_address: !secret sungrow_modbus_slave2
        address: 5016 # reg 5017
        input_type: input
        data_type: uint32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Phase A voltage2
        unique_id: sg_phase_a_voltage2
        device_address: !secret sungrow_modbus_slave2
        address: 5018 # reg: 5019
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase B voltage2
        unique_id: sg_phase_b_voltage2
        device_address: !secret sungrow_modbus_slave2
        address: 5019 # reg: 5020
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase C voltage2
        unique_id: sg_phase_c_voltage2
        device_address: !secret sungrow_modbus_slave2
        address: 5020 # reg: 5021
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Grid frequency2
        unique_id: sg_grid_frequency2
        device_address: !secret sungrow_modbus_slave2
        address: 5035 # reg 5036
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: "Hz"
        device_class: frequency
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Reactive power2
        unique_id: sg_reactive_power2
        device_address: !secret sungrow_modbus_slave2
        address: 5032 # reg 5033
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Power factor2
        unique_id: sg_power_factor2
        device_address: !secret sungrow_modbus_slave2
        address: 5034 # reg 5035
        input_type: input
        data_type: int16
        precision: 3
        unit_of_measurement: "%"
        device_class: power_factor
        state_class: measurement
        scale: 0.001
        scan_interval: 10

      #https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?pageNo=13
      #Meter Active Power: 5601-5602 S32 W (Energiezähler Wirkleistung)
      #Meter Phase A Active Power: 5603-5604 S32 W (Stromzähler Phase A Wirkleistung)
      #Meter Phase B Active Power: 5605-5606 S32 W (Stromzähler Phase B Wirkleistung)
      #Meter Phase C Active Power: 5607-5608 S32 W (Stromzähler Phase C Wirkleistung)
      - name: Meter active power raw2
        unique_id: sg_meter_active_power_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 5600 # reg 5601
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Meter phase A active power raw2
        unique_id: sg_meter_phase_a_active_power_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 5602 # reg 5603
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Meter phase B active power raw2
        unique_id: sg_meter_phase_b_active_power_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 5604 # reg 5605
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Meter phase C active power raw2
        unique_id: sg_meter_phase_c_active_power_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 5606 # reg 5607
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: BDC rated power2
        unique_id: sg_bdc_rated_power2
        device_address: !secret sungrow_modbus_slave2
        address: 5627 # reg 5628
        input_type: input
        data_type: uint16
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        scale: 100
        scan_interval: 600

      - name: BMS max. charging current2
        unique_id: sg_bms_max_charging_current2
        device_address: !secret sungrow_modbus_slave2
        address: 5634 # reg 5635
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 1
        scan_interval: 60

      - name: BMS max. discharging current2
        unique_id: sg_bms_max_discharging_current2
        device_address: !secret sungrow_modbus_slave2
        address: 5635 # reg 5636
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 1
        scan_interval: 60

      #https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?pageNo=13
      #Phase A Backup Power: 5723 S16 W (Backup Leistung Phase A)
      #Phase B Backup Power: 5724 S16 W (Backup Leistung Phase B)
      #Phase C Backup Power: 5725 S16 W (Backup Leistung Phase C)
      - name: Total backup power2
        device_address: !secret sungrow_modbus_slave2
        unique_id: sg_total_backup_power2
        address: 5725 # reg 5726
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Backup phase A power2
        unique_id: sg_backup_phase_a_power2
        device_address: !secret sungrow_modbus_slave2
        address: 5722 # reg 5723
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Backup phase B power2
        unique_id: sg_backup_phase_b_power2
        device_address: !secret sungrow_modbus_slave2
        address: 5723 # reg 5724
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Backup phase C power2
        unique_id: sg_backup_phase_c_power2
        device_address: !secret sungrow_modbus_slave2
        address: 5724 # reg 5725
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      # https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?postID=3324464#post3324464
      # - name: Meter phase A voltage2
      #   unique_id: sg_meter_phase_a_voltage2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 5740 # reg 5741
      #   input_type: input
      #   data_type: int16
      #   precision: 1
      #   unit_of_measurement: V
      #   device_class: voltage
      #   state_class: measurement
      #   scale: 0.1
      #   scan_interval: 10

      # - name: Meter phase B voltage2
      #   unique_id: sg_meter_phase_b_voltage2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 5741 # reg 5742
      #   input_type: input
      #   data_type: int16
      #   precision: 1
      #   unit_of_measurement: V
      #   device_class: voltage
      #   state_class: measurement
      #   scale: 0.1
      #   scan_interval: 10

      # - name: Meter phase C voltage2
      #   unique_id: sg_meter_phase_c_voltage2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 5742 # reg 5743
      #   input_type: input
      #   data_type: int16
      #   precision: 1
      #   unit_of_measurement: V
      #   device_class: voltage
      #   state_class: measurement
      #   scale: 0.1
      #   scan_interval: 10

      # - name: Meter phase A current2
      #   unique_id: sg_meter_phase_a_current2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 5743 # reg 5744
      #   input_type: input
      #   data_type: uint16
      #   precision: 0
      #   unit_of_measurement: A
      #   device_class: current
      #   state_class: measurement
      #   scale: 0.01
      #   scan_interval: 10

      # - name: Meter phase B current2
      #   unique_id: sg_meter_phase_b_current2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 5744 # reg 5745
      #   input_type: input
      #   data_type: uint16
      #   precision: 0
      #   unit_of_measurement: A
      #   device_class: current
      #   state_class: measurement
      #   scale: 0.01
      #   scan_interval: 10

      # - name: Meter phase C current2
      #   unique_id: sg_meter_phase_c_current2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 5745 # reg 5746
      #   input_type: input
      #   data_type: uint16
      #   precision: 0
      #   unit_of_measurement: A
      #   device_class: current
      #   state_class: measurement
      #   scale: 0.01
      #   scan_interval: 10

      # Start monthly PV generation
      # - name: Monthly PV generation (01 January)2
      #   unique_id: sg_monthly_pv_generation_01_january2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6226 # reg 6227
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (02 February)2
      #   unique_id: sg_monthly_pv_generation_02_february2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6227 # reg 6228
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (03 March)2
      #   unique_id: sg_monthly_pv_generation_03_march2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6228 # reg 6229
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (04 April)2
      #   unique_id: sg_monthly_pv_generation_04_april2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6229 # reg 6230
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (05 May)2
      #   unique_id: sg_monthly_pv_generation_05_may2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6230 # reg 6231
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (06 June)2
      #   unique_id: sg_monthly_pv_generation_06_june2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6231 # reg 6232
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (07 July)2
      #   unique_id: sg_monthly_pv_generation_07_july2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6232 # reg 6233
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (08 August)2
      #   unique_id: sg_monthly_pv_generation_08_august2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6233 # reg 6234
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (09 September)2
      #   unique_id: sg_monthly_pv_generation_09_september2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6234 # reg 6235
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (10 October)2
      #   unique_id: sg_monthly_pv_generation_10_october2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6235 # reg 6236
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (11 November)2
      #   unique_id: sg_monthly_pv_generation_11_november2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6236 # reg 6237
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly PV generation (12 December)2
      #   unique_id: sg_monthly_pv_generation_12_december2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6237 # reg 6238
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600
      # # End monthly PV generation

      # Start yearly pv generation
      # - name: Yearly PV generation (2019)2
      #   unique_id: sg_yearly_pv_generation_20192
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6257 # reg 6258
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2020)2
      #   unique_id: sg_yearly_pv_generation_20202
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6259 # reg 6260
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2021)2
      #   unique_id: sg_yearly_pv_generation_20212
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6261 # reg 6262
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2022)2
      #   unique_id: sg_yearly_pv_generation_20222
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6263 # reg 6264
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2023)2
      #   unique_id: sg_yearly_pv_generation_20232
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6265 # reg 6266
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2024)2
      #   unique_id: sg_yearly_pv_generation_20242
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6267 # reg 6268
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2025)2
      #   unique_id: sg_yearly_pv_generation_20252
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6269 # reg 6270
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2026)2
      #   unique_id: sg_yearly_pv_generation_20262
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6271 # reg 6272
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2027)2
      #   unique_id: sg_yearly_pv_generation_20272
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6273 # reg 6274
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2028)2
      #   unique_id: sg_yearly_pv_generation_20282
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6275 # reg 6276
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly PV generation (2029)2
      #   unique_id: sg_yearly_pv_generation_20292
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6277 # reg 6278
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600
      # # End yearly pv generation

      # Start monthly export
      # - name: Monthly export (01 January)2
      #   unique_id: sg_monthly_export_01_january2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6595 # reg 6596
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (02 February)2
      #   unique_id: sg_monthly_export_02_february2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6596 # reg 6597
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (03 March)2
      #   unique_id: sg_monthly_export_03_march2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6597 # reg 6598
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (04 April)2
      #   unique_id: sg_monthly_export_04_april2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6598 # reg 6599
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (05 May)2
      #   unique_id: sg_monthly_export_05_may2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6599 # reg 6600
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (06 June)2
      #   unique_id: sg_monthly_export_06_june2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6600 # reg 6601
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (07 July)2
      #   unique_id: sg_monthly_export_07_july2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6601 # reg 6602
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (08 August)2
      #   unique_id: sg_monthly_export_08_august2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6602 # reg 6603
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (09 September)2
      #   unique_id: sg_monthly_export_09_september2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6603 # reg 6604
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (10 October)2
      #   unique_id: sg_monthly_export_10_october2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6604 # reg 6605
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (11 November)2
      #   unique_id: sg_monthly_export_11_november2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6605 # reg 6606
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Monthly export (12 December)2
      #   unique_id: sg_monthly_export_12_december2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6606 # reg 6607
      #   input_type: input
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total_increasing
      #   scale: 0.1
      #   scan_interval: 600
      # # End monthly export

      # Start yearly export energy from PV
      # - name: Yearly Export (2019)2
      #   unique_id: sg_yearly_export_20192
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6615 # reg 6616
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2020)2
      #   unique_id: sg_yearly_export_20202
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6617 # reg 6618
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2021)2
      #   unique_id: sg_yearly_export_20212
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6619 # reg 6620
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2022)2
      #   unique_id: sg_yearly_export_20222
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6621 # reg 6622
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2023)2
      #   unique_id: sg_yearly_export_20232
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6623 # reg 6624
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2024)2
      #   unique_id: sg_yearly_export_20242
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6625 # reg 6626
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2025)2
      #   unique_id: sg_yearly_export_20252
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6627 # reg 6628
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2026)2
      #   unique_id: sg_yearly_export_20262
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6629 # reg 6630
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2027)2
      #   unique_id: sg_yearly_export_20272
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6631 # reg 6632
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600

      # - name: Yearly Export (2028)2
      #   unique_id: sg_yearly_export_20282
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 6633 # reg 6634
      #   input_type: input
      #   data_type: uint32
      #   swap: word
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy
      #   state_class: total
      #   scale: 0.1
      #   scan_interval: 600
      # # End yearly export energy from PV

      # - name: System state2
      #   unique_id: sg_system_state2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 12999 # reg 13000
      #   input_type: input
      #   data_type: uint16
      #   precision: 0
      #   scale: 1
      #   state_class: measurement
      #   scan_interval: 10

      # register running state is not available for certain SH*RS inverters
      # template sensors are used to determine the states based on other sensors
      - name: Running state2
        unique_id: sg_running_state2
        device_address: !secret sungrow_modbus_slave2
        address: 13000 # reg 13001
        input_type: input
        data_type: uint16
        precision: 0
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Daily PV generation2
        unique_id: sg_daily_pv_generation2
        device_address: !secret sungrow_modbus_slave2
        address: 13001 # reg 13002
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total PV generation2
        unique_id: sg_total_pv_generation2
        device_address: !secret sungrow_modbus_slave2
        address: 13002 # reg 13003
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily exported energy from PV2
        unique_id: sg_daily_exported_energy_from_PV2
        device_address: !secret sungrow_modbus_slave2
        address: 13004 # reg 13005
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total exported energy from PV2
        unique_id: sg_total_exported_energy_from_pv2
        device_address: !secret sungrow_modbus_slave2
        address: 13005 # reg 13006
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Load Power2
        unique_id: sg_load_power2
        device_address: !secret sungrow_modbus_slave2
        address: 13007 # reg 13008
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      # this value returns a positive value when exporting and a negative value when importing power
      - name: Export power raw2
        unique_id: sg_battery_export_power_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 13009 # reg 13010
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Daily battery charge from PV2
        unique_id: sg_daily_battery_charge_from_pv2
        device_address: !secret sungrow_modbus_slave2
        address: 13011 # reg 13012
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total battery charge from PV2
        unique_id: sg_total_battery_charge_from_pv2
        device_address: !secret sungrow_modbus_slave2
        address: 13012 # reg 13013
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily direct energy consumption2
        unique_id: sg_daily_direct_energy_consumption2
        device_address: !secret sungrow_modbus_slave2
        address: 13016 # reg 13017
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total direct energy consumption2
        unique_id: sg_total_direct_energy_consumption2
        device_address: !secret sungrow_modbus_slave2
        address: 13017 # reg 13018
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Battery voltage2
        unique_id: sg_battery_voltage2
        device_address: !secret sungrow_modbus_slave2
        address: 13019 # reg 13020
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      # note: datasheet states that this value is unsigned, but it is acually signed:
      # https://github.com/mkaiser/Sungrow-SHx-Inverter-Modbus-Home-Assistant/issues/304
      - name: Battery current2
        unique_id: sg_battery_current2
        device_address: !secret sungrow_modbus_slave2
        address: 13020 # reg 13021
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        state_class: measurement
        device_class: Current
        scale: 0.1
        scan_interval: 10

      # always positive battery power
      # use binary_sensor.battery_charging | discharging to retrieve the direction of the energy flow
      - name: Battery power raw2
        unique_id: sg_battery_power_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 13021 # reg 13022
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Battery level2
        unique_id: sg_battery_level2
        device_address: !secret sungrow_modbus_slave2
        address: 13022 # reg 13023
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 60

      - name: Battery state of health2
        unique_id: sg_battery_state_of_health2
        device_address: !secret sungrow_modbus_slave2
        address: 13023 # reg 13024
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: "%"
        state_class: measurement
        scale: 0.1
        scan_interval: 600

      - name: Battery temperature2
        unique_id: sg_battery_temperature2
        device_address: !secret sungrow_modbus_slave2
        address: 13024 # reg 13025
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: °C
        device_class: Temperature
        state_class: measurement
        scale: 0.1
        scan_interval: 60

      - name: Daily battery discharge2
        unique_id: sg_daily_battery_discharge2
        device_address: !secret sungrow_modbus_slave2
        address: 13025 # reg 13026
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total battery discharge2
        unique_id: sg_total_battery_discharge2
        device_address: !secret sungrow_modbus_slave2
        address: 13026 # reg 13027
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Phase A current2
        unique_id: sg_phase_a_current2
        device_address: !secret sungrow_modbus_slave2
        address: 13030 # reg 13031
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase B current2
        unique_id: sg_phase_b_current2
        device_address: !secret sungrow_modbus_slave2
        address: 13031 # reg 13032
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase C current2
        unique_id: sg_phase_c_current2
        device_address: !secret sungrow_modbus_slave2
        address: 13032 # reg 13033
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Total active power2
        unique_id: sg_total_active_power2
        device_address: !secret sungrow_modbus_slave2
        address: 13033 # reg 13034
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Daily imported energy2
        unique_id: sg_daily_imported_energy2
        device_address: !secret sungrow_modbus_slave2
        address: 13035 # reg 13036
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total imported energy2
        unique_id: sg_total_imported_energy2
        device_address: !secret sungrow_modbus_slave2
        address: 13036 # reg 13037
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily battery charge2
        unique_id: sg_daily_battery_charge2
        device_address: !secret sungrow_modbus_slave2
        address: 13039 # reg 13040
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total battery charge2
        unique_id: sg_total_battery_charge2
        device_address: !secret sungrow_modbus_slave2
        address: 13040 # reg 13041
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily exported energy2
        unique_id: sg_daily_exported_energy2
        device_address: !secret sungrow_modbus_slave2
        address: 13044 # reg 13045
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total exported energy2
        unique_id: sg_total_exported_energy2
        device_address: !secret sungrow_modbus_slave2
        address: 13045 # reg 13046
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      #####################
      # holding registers
      #####################
      - name: Inverter start stop2
        unique_id: sg_inverter_start_stop2
        device_address: !secret sungrow_modbus_slave2
        address: 12999 # reg 13000
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      - name: EMS mode selection raw2
        unique_id: sg_ems_mode_selection_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 13049 # reg 13050
        input_type: holding
        data_type: uint16
        state_class: measurement
        scan_interval: 10

      - name: Battery forced charge discharge cmd raw2
        unique_id: sg_battery_forced_charge_discharge_cmd_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 13050 # reg 13051
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      - name: Battery forced charge discharge power2
        unique_id: sg_battery_forced_charge_discharge_power2
        device_address: !secret sungrow_modbus_slave2
        address: 13051 # reg 13052
        input_type: holding
        data_type: uint16
        precision: 0
        # datasheet says:
        # 0 to 5000 W for SH*K-*
        # 0 to 100 % for SH*.0RT
        # for my SH10RT it is set in Watt, not in %
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scan_interval: 10

      - name: Max SoC2
        unique_id: sg_max_soc2
        device_address: !secret sungrow_modbus_slave2
        address: 13057 # reg 13058
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Min SoC2
        unique_id: sg_min_soc2
        device_address: !secret sungrow_modbus_slave2
        address: 13058 # reg 13059
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Export power limit2
        unique_id: sg_export_power_limit2
        device_address: !secret sungrow_modbus_slave2
        address: 13073 # reg 13074
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Export power limit mode raw2
        unique_id: sg_export_power_limit_mode_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 13086 # reg 13087
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      #undocumented sensor (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      # - name: Reserved SoC for backup2
      #   unique_id: sg_reserved_soc_for_backup2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 13099 # reg 13100
      #   input_type: holding
      #   data_type: uint16
      #   unit_of_measurement: "%"
      #   device_class: battery
      #   state_class: measurement
      #   scale: 1
      #   scan_interval: 10

      - name: Battery max charge power2
        unique_id: sg_battery_max_charge_power2
        device_address: !secret sungrow_modbus_slave2
        address: 33046 # reg 33047
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

      - name: Battery max discharge power2
        unique_id: sg_battery_max_discharge_power2
        device_address: !secret sungrow_modbus_slave2
        address: 33047 # reg 33048
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

      #undocumented sensor (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      # - name: Battery capacity2
      #   unique_id: sg_battery_capacity2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 33048 # reg 33049
      #   input_type: holding
      #   data_type: uint16
      #   precision: 1
      #   unit_of_measurement: kWh
      #   device_class: energy_storage
      #   scale: 0.01
      #   scan_interval: 600

      #undocumented sensor (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      # - name: Battery charging start power2
      #   unique_id: sg_battery_charging_start_power2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 33148 # reg 33149
      #   input_type: holding
      #   data_type: uint16
      #   precision: 0
      #   unit_of_measurement: W
      #   device_class: power
      #   state_class: measurement
      #   scale: 10
      #   scan_interval: 10

      #undocumented sensor (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      # - name: Battery discharging start power2
      #   unique_id: sg_battery_discharging_start_power2
      #   device_address: !secret sungrow_modbus_slave2
      #   address: 33149 # reg 33150
      #   input_type: holding
      #   data_type: uint16
      #   precision: 0
      #   unit_of_measurement: W
      #   device_class: power
      #   state_class: measurement
      #   scale: 10
      #   scan_interval: 10

      - name: Global mpp scan manual raw2
        unique_id: sg_global_mpp_scan_manual_raw2
        device_address: !secret sungrow_modbus_slave2
        address: 30229 # reg 30230
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

sensor:
  - platform: filter
    name: "Daily consumed energy (filtered)2"
    entity_id: sensor.daily_consumed_energy2
    # commented following line, due to: 'device_class' is an invalid option for 'sensor.filter', check: device_class
    # device_class: energy
    # commented following line, due to: 'state_class' is an invalid option for 'sensor.filter', check: state_class
    # state_class: total_increasing
    filters:
      - filter: time_simple_moving_average
        window_size: "00:05"
        precision: 2

# 'virtual' template sensors for better readability
template:
  - binary_sensor:
      - name: PV generating2
        unique_id: sg_pv_generating2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state2', 'unavailable')
          and not is_state('sensor.total_dc_power2', 'unavailable')
          }}
        state: >-
          {% if states('sensor.running_state2')|is_number %}
            {# use available sensor running_state #}
            {{ states('sensor.running_state2')|int |bitwise_and(0x1) }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if states('sensor.total_dc_power2')|int > 0 %}
              1
            {% else %}
              0
            {% endif %}
          {% endif %}

      - name: PV generating (delay)2
        unique_id: sg_pv_generating_delay2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.pv_generating2', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.pv_generating2') }}"

      - name: Battery charging2
        unique_id: sg_battery_charging2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state2', 'unavailable')
          or
            (   not is_state('sensor.ems_mode_selection_raw2', 'unavailable')
            and not is_state('sensor.battery_forced_charge_discharge_cmd_raw2', 'unavailable')
            and not is_state('sensor.battery_power_raw2', 'unavailable')
            and not is_state('sensor.total_dc_power2', 'unavailable')
            and not is_state('sensor.load_power2', 'unavailable')
            )
          }}
        state: >-
          {% if states('sensor.running_state2')|is_number %}
            {# use available sensor running_state #}
            {% if states('sensor.running_state2')|int|bitwise_and(0x2) > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if (states('sensor.ems_mode_selection2') ) == "Forced mode" %}
              {# EMS forced mode #}
              {% if (states('sensor.battery_forced_charge_discharge_cmd2') == "Forced charge") %}
                {# in mode Forced charge #}
                {% if (states('sensor.battery_power_raw2')|int > 0 ) %}
                  {# power flow from/to battery #}
                  on
                {% else %}
                  {# no power flow from/to battery #}
                  off
                {% endif %}
              {% else %}
                {# in EMS mode, but not in mode Forced charge #}
                off
              {% endif %}
            {% else %}
              {# not in EMS forced mode, assuming self consumption mode #}
              {% if states('sensor.total_dc_power2')|int > states('sensor.load_power2')|int %}
                {# more power generated than consumed. assuming battery charging #}
                on
              {% else %}
                off
              {% endif %}
            {% endif %}
          {% endif %}

      - name: Battery charging (delay)2
        unique_id: sg_battery_charging_delay2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.battery_charging2', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.battery_charging2') }}"

      - name: Battery discharging2
        unique_id: sg_battery_discharging2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state2', 'unavailable')
          or
            (   not is_state('sensor.ems_mode_selection_raw2', 'unavailable')
            and not is_state('sensor.battery_forced_charge_discharge_cmd_raw2', 'unavailable')
            and not is_state('sensor.battery_power_raw2', 'unavailable')
            and not is_state('sensor.total_dc_power2', 'unavailable')
            and not is_state('sensor.load_power2', 'unavailable')
            )
          }}
        state: >-
          {% if states('sensor.running_state2')|is_number %}
            {# use available sensor running_state2 #}
            {% if states('sensor.running_state2')|int|bitwise_and(0x4) > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if (states('sensor.ems_mode_selection2') ) == "Forced mode" %}
              {# EMS forced mode #}
              {% if (states('sensor.battery_forced_charge_discharge_cmd2') == "Forced discharge") %}
                {# in mode Forced discharge #}
                {% if (states('sensor.battery_power_raw2')|int > 0 ) %}
                  {# power flow from/to battery #}
                  on
                {% else %}
                  {# no power flow from/to battery #}
                  off
                {% endif %}
              {% else %}
                {# in EMS mode, but not in mode Forced charge #}
                off
              {% endif %}
            {% else %}
              {# not in EMS forced mode, assuming self consumption mode #}
              {% if ( ( states('sensor.total_dc_power2')|int < states('sensor.load_power2')|int ) ) and states('sensor.battery_power_raw')|int > 0 %}
                {# more power consumed than generated and some battery power --> assuming battery discharging #}
                on
              {% else %}
                off
              {% endif %}
            {% endif %}
          {% endif %}

      - name: Battery discharging (delay)2
        unique_id: sg_battery_discharging_delay2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.battery_discharging2', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.battery_discharging2') }}"

      - name: Exporting power2
        unique_id: sg_exporting_power2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state2', 'unavailable')
          and not is_state('sensor.export_power_raw2', 'unavailable')
          }}
        state: >-
          {% if states('sensor.running_state2')|is_number %}
            {# use available sensor running_state #}
            {{ states('sensor.running_state2')|int|bitwise_and(0x10) > 0 }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if states('sensor.export_power_raw2')|int > 0 %}
              1
            {% else %}
              0
            {% endif %}
          {% endif %}

      - name: Exporting power (delay)2
        unique_id: sg_exporting_power_delay2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.exporting_power2', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.exporting_power2') }}"

      - name: Importing power2
        unique_id: sg_importing_power2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state2', 'unavailable')
          and not is_state('sensor.running_state2', 'unavailable')
          }}
        state: >-
          {% if states('sensor.running_state2')|is_number %}
            {# use available sensor running_state #}
            {{ states('sensor.running_state2')|int|bitwise_and(0x20) > 0 }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state #}
            {% if states('sensor.export_power_raw2')|int < 0 %}
              1
            {% else %}
              0
            {% endif %}
          {% endif %}

      - name: Importing power (delay)2
        unique_id: sg_importing_power_delay2
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.importing_power2', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.importing_power2') }}"

  - sensor:
      - name: MPPT1 power2
        unique_id: sg_mppt1_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.mppt1_voltage2', 'unavailable')
          and not is_state('sensor.mppt1_current2', 'unavailable')
          }}
        state: "{{ (states('sensor.mppt1_voltage2') | float * states('sensor.mppt1_current2') | float) |int }}"

      - name: MPPT2 power2
        unique_id: sg_mppt2_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.mppt2_voltage2', 'unavailable')
          and not is_state('sensor.mppt2_current2', 'unavailable' )
          }}
        state: "{{ (states('sensor.mppt2_voltage2') | float * states('sensor.mppt2_current2') | float) |int }}"

      - name: Phase A power2
        unique_id: sg_phase_a_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.phase_a_voltage2', 'unavailable')
          and not is_state('sensor.phase_a_current2', 'unavailable')
          }}
        state: "{{ (states('sensor.phase_a_voltage2') | float * states('sensor.phase_a_current2') | float) |int }}"

      - name: Phase B power2
        unique_id: sg_phase_b_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.phase_b_voltage2', 'unavailable')
          and not is_state('sensor.phase_b_current2', 'unavailable')
          }}
        state: "{{ (states('sensor.phase_b_voltage2') | float * states('sensor.phase_b_current2') | float) |int }}"

      - name: Phase C power2
        unique_id: sg_phase_c_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.phase_c_voltage2', 'unavailable')
          and not is_state('sensor.phase_c_curren2t', 'unavailable')
          }}
        state: "{{ (states('sensor.phase_c_voltage2') | float * states('sensor.phase_c_current2') | float) |int }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - name: Meter active power2
        unique_id: sg_meter_active_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.meter_active_power_raw2', 'unavailable')
          and states('sensor.meter_active_power_raw2')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_active_power_raw2') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - name: Meter phase A active power2
        unique_id: sg_meter_phase_a_active_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.meter_phase_a_active_power_raw2', 'unavailable')
          and states('sensor.meter_phase_a_active_power_raw2')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_phase_a_active_power_raw2') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - name: Meter phase B active power2
        unique_id: sg_meter_phase_b_active_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.meter_phase_b_active_power_raw2', 'unavailable')
          and states('sensor.meter_phase_b_active_power_raw2')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_phase_b_active_power_raw2') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - name: Meter phase C active power2
        unique_id: sg_meter_phase_c_active_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.meter_phase_c_active_power_raw2', 'unavailable')
          and states('sensor.meter_phase_c_active_power_raw2')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_phase_c_active_power_raw2') }}"

      - name: Sungrow inverter state2
        unique_id: sg_inverter_state2
        device_class: enum
        availability: "{{ not is_state('sensor.system_state2', 'unavailable') }}"
        state: >-
          {% if ((states('sensor.system_state2') |int) in [0x0000,0x0040]) %}
            Running
          {% elif ((states('sensor.system_state2') |int) == 0x0410) %}
            Off-grid Charge
          {% elif ((states('sensor.system_state2') |int) == 0x0200) %}
            Update Failed
          {% elif ((states('sensor.system_state2') |int) == 0x0400) %}
            Maintain mode
          {% elif ((states('sensor.system_state2') |int) == 0x0800) %}
            Forced mode
          {% elif ((states('sensor.system_state2') |int) == 0x1000) %}
            Off-grid mode
          {% elif ((states('sensor.system_state2') |int) == 0x1111) %}
            Un-Initialized
          {% elif ((states('sensor.system_state2') |int) in [0x0010,0x12000]) %}
            Initial Standby
          {% elif ((states('sensor.system_state2') |int) in [0x1300,0x0002]) %}
            Shutdown
          {% elif ((states('sensor.system_state2') |int) in [0x1400,0x0008] ) %}
            Standby
          {% elif ((states('sensor.system_state2') |int) in [0x1500,0x0004] ) %}
            Emergency Stop
          {% elif ((states('sensor.system_state2') |int) in [0x1600,0x0020]) %}
            Startup
          {% elif ((states('sensor.system_state2') |int) == 0x1700) %}
            AFCI self test shutdown
          {% elif ((states('sensor.system_state2') |int) == 0x1800) %}
            Intelligent Station Building Status
          {% elif ((states('sensor.system_state2') |int) == 0x1900) %}
            Safe Mode
          {% elif ((states('sensor.system_state2') |int) == 0x2000) %}
            Open Loop
          {% elif ((states('sensor.system_state2') |int) == 0x2501) %}
            Restarting
          {% elif ((states('sensor.system_state2') |int) == 0x4000) %}
            External EMS mode
          {% elif ((states('sensor.system_state2') |int) == in [0x55000,0x0100]) %}
            Fault
          {% elif ((states('sensor.system_state2') |int) == in [0x8000,0x0001]) %}
            Stop
          {% elif ((states('sensor.system_state2') |int) == 0x8100) %}
            De-rating Running
          {% elif ((states('sensor.system_state2') |int) == 0x8200) %}
            Dispatch Run
          {% elif ((states('sensor.system_state2') |int) == 0x9100) %}
            Warn Running
          {% else %}
            Unknown - should not see me! {{ (states('sensor.system_state2') |int) }}
          {% endif %}

      - name: Sungrow device type2
        unique_id: sg_device_type2
        availability: "{{ not is_state('sensor.sungrow_device_type_code2', 'unavailable') }}"
        device_class: enum
        state: >-
          {% if ((states('sensor.sungrow_device_type_code2') |int)  == 0x0D06) %}
            SH3K6
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D07) %}
            SH4K6
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D09) %}
            SH5K-20
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D03) %}
            SH5K-V13
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D0A) %}
            SH3K6-30
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D0B) %}
            SH4K6-30
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D0C) %}
            SH5K-30
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D17) %}
            SH3.RS
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D0D) %}
            SH3.6RS
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D18) %}
            SH4.0RS
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D0F) %}
            SH5.0RS
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D10) %}
          SH6.0RS
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D1A) %}
          SH8.0RS
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D1B) %}
            SH10RS
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E00) %}
          SH5.0RT
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E01) %}
            SH6.0RT
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E02) %}
            SH8.0RT
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E03) %}
            SH10RT
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E10) %}
            SH5.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E11) %}
            SH6.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E12) %}
            SH8.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E13) %}
            SH10RT-20
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E0C) %}
            SH5.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E0D) %}
            SH6.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E0E) %}
            SH8.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E0F) %}
            SH10RT-V112
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E08) %}
            SH5.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E09) %}
            SH6.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E0A) %}
            SH8.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E0B) %}
            SH10RT-V122
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E20) %}
            SH5T-V11
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E21) %}
            SH6T-V11
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E22) %}
            SH8T-V11
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E23) %}
            SH10T-V11
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E24) %}
            SH12T-V11
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E25) %}
            SH15T-V11
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E26) %}
            SH20T-V11
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E28) %}
            SH25T-V11
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0D0E) %}
            SH4.6RS
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E26) %}
            SH20T
          {% elif ((states('sensor.sungrow_device_type_code2') |int) == 0x0E28) %}
            SH25T
          {% else %}
            Unknown device code: {{ '%0x' % (states('sensor.sungrow_device_type_code2') |int)  }}
          {% endif %}

      # make the sensor battery_forced_charge_discharge_cmd more human readable
      # Inverter States from modbus reference manual
      # 0xAA forced charge
      # 0xBB forced discharge
      # 0xCC Stop (default)
      - name: Battery forced charge discharge cmd2
        unique_id: sg_battery_forced_charge_discharge_cmd2
        availability: "{{ not is_state('sensor.battery_forced_charge_discharge_cmd_raw2', 'unavailable') }}"
        # TODO: test state_class with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.battery_forced_charge_discharge_cmd_raw2') |int) == 0x00AA) %}
            Forced charge
          {% elif ((states('sensor.battery_forced_charge_discharge_cmd_raw2') |int)  == 0x00BB) %}
            Forced discharge
          {% elif ((states('sensor.battery_forced_charge_discharge_cmd_raw2') |int)  == 0x00CC) %}
            Stop (default)
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - name: Export power limit mode2
        unique_id: export_power_limit_mode2
        availability: "{{ not is_state('sensor.export_power_limit_mode_raw2', 'unavailable') }}"
        # TODO: test state_class with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.export_power_limit_mode_raw2') |int) == 0x00AA) %}
            Enabled
          {% elif ((states('sensor.export_power_limit_mode_raw2') |int)  == 0x0055) %}
            Disabled
          {% else %}
            Unknown - should not see me!
          {% endif %}

      # make the sensor ems_selection_raw more human readable
      - name: EMS mode selection2
        unique_id: sg_ems_mode_selection2
        availability: "{{ not is_state('sensor.ems_mode_selection_raw2', 'unavailable') }}"
        # TODO: test state_class with enum with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.ems_mode_selection_raw2') |int) == 0) %}
            Self-consumption mode (default)
          {% elif ((states('sensor.ems_mode_selection_raw2') |int) == 2) %}
            Forced mode
          {% elif ((states('sensor.ems_mode_selection_raw2') |int) == 3) %}
            External EMS
          {% elif ((states('sensor.ems_mode_selection_raw2') |int) == 4) %}
            VPP
          {% elif ((states('sensor.ems_mode_selection_raw2') |int) == 8) %}
            MicroGrid
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - name: Signed battery power2 # positive if charging and negative if discharging
        unique_id: sg_signed_battery_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('binary_sensor.battery_charging2', 'unavailable')
          and not is_state('binary_sensor.battery_discharging2', 'unavailable')
          and not is_state('sensor.battery_power_raw2', 'unavailable')
          }}
        state: >-
          {% if is_state('binary_sensor.battery_charging2', 'on') %}
            {{ (states('sensor.battery_power_raw2') | float)}}
          {% elif is_state('binary_sensor.battery_discharging2', 'on') %}
            {{ (states('sensor.battery_power_raw2') | float * -1)}}
          {% else %}
            0
          {% endif %}

      - name: Battery charging power2 # positive if charging else zero
        unique_id: sg_battery_charging_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('binary_sensor.battery_charging2', 'unavailable')
          and not is_state('sensor.battery_power_raw2', 'unavailable')
          }}
        state: >-
          {% if is_state('binary_sensor.battery_charging2', 'on') %}
            {{ states('sensor.battery_power_raw2') }}
          {% else %}
            0
          {% endif %}

      - name: Battery discharging power2 # positive if discharging else zero
        unique_id: sg_battery_discharging_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('binary_sensor.battery_discharging2', 'unavailable')
          and not is_state('sensor.battery_power_raw2', 'unavailable')
          }}
        state: >-
          {% if is_state('binary_sensor.battery_discharging2', 'on') %}
            {{ states('sensor.battery_power_raw2') }}
          {% else %}
            0
          {% endif %}

      - name: Import power2 # power from grid: positive if importing, else zero
        unique_id: sg_import_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ not is_state('sensor.export_power_raw2', 'unavailable') }}"
        state: >-
          {% if states('sensor.export_power_raw2')|int < 0 %}
            {{ states('sensor.export_power_raw2')|int *-1 }}
          {% else %}
            0
          {% endif %}

      - name: Export power2 # power to grid: positive if exporting, else zero
        unique_id: sg_export_power2
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ not is_state('sensor.export_power_raw2', 'unavailable') }}"
        state: >-
          {% if states('sensor.export_power_raw')|int > 0 %}
            {{ states('sensor.export_power_raw2') }}
          {% else %}
            0
          {% endif %}

      - name: "Monthly PV generation (current)2"
        unique_id: sg_monthly_pv_generation_current2
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currMonth2 = 'monthly_pv_generation_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth2)|is_number }}
        state: >
          {% set currMonth2 = 'monthly_pv_generation_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth2) }}

      - name: "Yearly PV generation (current)2"
        unique_id: sg_yearly_pv_generation_current2
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currYear2 = 'yearly_pv_generation_' ~ now().year %}
          {{ states('sensor.' ~ currYear2)|is_number }}
        state: >
          {% set currYear2 = 'yearly_pv_generation_' ~ now().year %}
          {{ states('sensor.' ~ currYear2) }}

      - name: "Monthly export (current)2"
        unique_id: sg_monthly_export_current2
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currMonth2 = 'monthly_export_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth2)|is_number }}
        state: >
          {% set currMonth2 = 'monthly_export_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth2) }}

      - name: "Yearly export (current)2"
        unique_id: sg_yearly_export_current2
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currYear2 = 'yearly_export_' ~ now().year %}
          {{ states('sensor.' ~ currYear2)|is_number }}
        state: >
          {% set currYear2 = 'yearly_export_' ~ now().year %}
          {{ states('sensor.' ~ currYear2) }}

      - name: "Battery level (nominal)2"
        unique_id: sg_battery_level_nom2
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.battery_level2', 'unavailable')
          and not is_state('sensor.min_soc2', 'unavailable')
          and not is_state('sensor.max_soc2', 'unavailable')
          }}
        state: >-
          {% set soc_min2 = states('sensor.min_soc2') | float %}
          {% set soc_max2 = states('sensor.max_soc2') | float %}
          {% set soc_cur2 = states('sensor.battery_level2') | float %}
          {{
            ((soc_min2) + ((soc_max2 - soc_min2) * (soc_cur2 / 100))) | round(1)
          }}

      - name: "Battery charge (nominal)2"
        unique_id: sg_battery_charge_nom2
        unit_of_measurement: kWh
        device_class: energy_storage
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.battery_capacity2', 'unavailable')
          and not is_state('sensor.battery_level_nominal2', 'unavailable')
          }}
        state: >-
          {{
            ( states('sensor.battery_capacity2') | float *
            states('sensor.battery_level_nominal2') | float / 100 )| round(1)
          }}

      - name: "Battery charge2"
        unique_id: sg_battery_charge2
        unit_of_measurement: kWh
        device_class: energy_storage
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.battery_capacity2', 'unavailable')
          and not is_state('sensor.battery_level2', 'unavailable')
          and not is_state('sensor.min_soc2', 'unavailable')
          and not is_state('sensor.max_soc2', 'unavailable')
          }}
        state: >-
          {{
            ( states('sensor.battery_capacity2')|float
            * ( states('sensor.max_soc2')|float - states('sensor.min_soc2')|float ) /100
            * states('sensor.battery_level2')|float /100
            ) |round(2)
          }}

      - name: Daily consumed energy2
        unique_id: uid_daily_consumed_energy2
        unit_of_measurement: kWh
        device_class: energy
        # the state class is not total_increasing, because sometimes the read value are read at different times,
        # resulting in decreasing values.
        # "measurement" does not work, because it is incompatible with "energy"
        state_class: total
        availability: >-
          {{
          not is_state('sensor.daily_pv_generation2', 'unavailable')
          and not is_state('sensor.daily_exported_energy2', 'unavailable')
          and not is_state('sensor.daily_imported_energy2', 'unavailable')
          and not is_state('sensor.daily_battery_charge2', 'unavailable')
          and not is_state('sensor.daily_battery_discharge2', 'unavailable')
          }}
        state: >-
          {{
            (
              states('sensor.daily_pv_generation2')|float
              - states('sensor.daily_exported_energy2')|float
              + states('sensor.daily_imported_energy2')|float
              - states('sensor.daily_battery_charge2')|float
              + states('sensor.daily_battery_discharge2')|float
            )
          }}

      - name: Total consumed energy2
        unique_id: uid_total_consumed_energy2
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        availability: >-
          {{
          not is_state('sensor.total_pv_generation2', 'unavailable')
          and not is_state('sensor.total_exported_energy2', 'unavailable')
          and not is_state('sensor.total_imported_energy2', 'unavailable')
          and not is_state('sensor.total_battery_charge2', 'unavailable')
          and not is_state('sensor.total_battery_discharge2', 'unavailable')
          }}
        state: >-
          {{
            (
              states('sensor.total_pv_generation2')|float
              - states('sensor.total_exported_energy2')|float
              + states('sensor.total_imported_energy2')|float
              - states('sensor.total_battery_charge2')|float
              + states('sensor.total_battery_discharge2')|float
            )|int
          }}

# getting input for Min and Max SoC
input_number:
  set_sg_min_soc2:
    name: Set min SoC2
    min: 0
    max: 50
    step: 1

  set_sg_max_soc2:
    name: Set max SoC2
    min: 50
    max: 100
    step: 1

  set_sg_reserved_soc_for_backup2:
    name: Set reserved SoC for backup2
    min: 0
    max: 100
    step: 1

  set_sg_forced_charge_discharge_power2:
    name: Set forced charge discharge power2 in W
    min: 0
    max: 5000 # change this value according to the capability of your battery
    step: 100

  set_sg_battery_max_charge_power2:
    name: Set max battery charge power2 in W
    min: 100
    max: 5000 # change this value according to the capability of your battery
    step: 100

  set_sg_battery_max_discharge_power2:
    name: Set max battery discharge power2 in W
    min: 100
    max: 5000 # change this value according to the capability of your battery
    step: 100

  # This threshold is compared against the currently achievable charging power, not just against the currently available surplus.
  # If this is set higher than the maximum charging power of the battery, charging will not start.
  # If currently achievable charging power drops below this threshold, charging will stop. Actual charging power (limited by register 33047) is ignored.
  # Charging might stop before reaching 100% if set too close to the maximum charging power of the battery, due to achievable charging power naturally dropping at high state of charge.
  set_sg_battery_charging_start_power2:
    name: Set battery charging start power2 in W
    min: 0
    max: 1000
    step: 10

  set_sg_battery_discharging_start_power2:
    name: Set battery discharging start power2 in W
    min: 0
    max: 1000
    step: 10

  set_sg_export_power_limit2:
    name: Set export power limit2
    min: 0
    max: 10000 # Note: max for SH10.RT. It would be nice to have this as a global variable /secret
    step: 100

input_select:
  set_sg_inverter_run_mode2:
    name: Inverter mode2
    options:
      - "Enabled"
      - "Shutdown"

  # get input for battery mode (forced charge/discharge, stop (default) )
  set_sg_ems_mode2:
    name: EMS mode2
    options:
      - "Self-consumption mode (default)"
      - "Forced mode"
      - "External EMS" # required for multiple inverters main /follower?
    # these are commented, because they are rarely used
    #      - "VPP"
    #      - "MicroGrid"
    icon: mdi:battery-unknown

  set_sg_battery_forced_charge_discharge_cmd2:
    name: Battery forced charge discharge cmd2
    options:
      - "Stop (default)"
      - "Forced charge"
      - "Forced discharge"
    icon: mdi:battery-unknown

  set_sg_export_power_limit_mode2:
    name: Export power limit mode2
    options:
      - "Enabled"
      - "Disabled"
    icon: mdi:export

  set_sg_global_mpp_scan_manual2:
    name: Global mpp scan manual2
    options:
      - "Enabled"
      - "Disabled"
    icon: mdi:export

# Automations: Write modbus registers on input changes via GUI
# note: If you change a value by the sliders, it will take up to 60 seconds until the state variables are updated
# Unfortunately, I could not find a way to "force update" modbus registers, yet...
automation:
  - id: "automation_sungrow_inverter_state2"
    alias: "sungrow inverter state2"
    description: "Enables/ stops the inverter"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_inverter_run_mode2
    condition: []
    variables:
      sg_start: 0xCF
      sg_stop: 0xCE
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 12999 # reg 13000
          value: >
            {% if is_state('input_select.set_sg_inverter_run_mode2', "Enabled") %}
              {{sg_start}}
            {% else %}
              {{sg_stop}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_state_input_selector_update2"
    alias: "sungrow inverter enable/ stop input selector update2"
    description: "Updates enable/ stops input selector"
    trigger:
      - platform: state
        entity_id:
          - sensor.sungrow_inverter_state2
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.sungrow_inverter_state2', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_inverter_run_mode2
        data:
          option: >
            {% if is_state('sensor.sungrow_inverter_state2', "Stop") %}
              Shutdown
            {% else %}
              Enabled
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_update_max_soc2"
    alias: "sungrow inverter update max SoC2"
    description: "Updates Sungrow max Soc holding register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_max_soc2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 13057 # reg 13058
          value: "{{ states('input_number.set_sg_max_soc2') | int *10}}"
    mode: single

  - id: "automation_sungrow_inverter_update_max_soc_input_slider_update2"
    alias: "sungrow inverter max SoC input slider update2"
    description: "Updates Sungrow max Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.max_soc2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_max_soc2
        data:
          value: "{{ states('sensor.max_soc2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_min_soc2"
    alias: "sungrow inverter update min SoC2"
    description: "Updates Sungrow min Soc holding register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_min_soc2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 13058 # reg 13059
          value: "{{ states('input_number.set_sg_min_soc2') | int *10}}"
    mode: single

  - id: "automation_sungrow_inverter_update_min_soc_input_slider_update2"
    alias: "sungrow inverter min SoC input slider update2"
    description: "Updates Sungrow min Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.min_soc2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_min_soc2
        data:
          value: "{{ states('sensor.min_soc2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_reserved_soc_for_backup2"
    alias: "sungrow inverter update reserved soc for backup2"
    description: "Updates reserved SoC for backup register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_reserved_soc_for_backup2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 13099 # reg 13100
          value: "{{ states('input_number.set_sg_reserved_soc_for_backup2') | int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_reserved_backup_soc_input_slider_update2"
    alias: "sungrow inverter reserved backup SoC input slider update2"
    description: "Updates Sungrow reserved backup Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.reserved_soc_for_backup2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_reserved_soc_for_backup2
        data:
          value: "{{ states('sensor.reserved_soc_for_backup2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_cmd2"
    alias: "sungrow inverter update battery forced charge discharge cmd2"
    description: "Updates Sungrow holding register for battery forced charge discharge command"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_battery_forced_charge_discharge_cmd2
    condition: []
    variables:
      ems_forced_charge: 0xAA
      ems_forced_discharge: 0xBB
      ems_stop_default: 0xCC
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 13050 # reg 13051
          value: >
            {% if is_state('input_select.set_sg_battery_forced_charge_discharge_cmd2', "Stop (default)") %}
              {{ems_stop_default}}
            {% elif is_state('input_select.set_sg_battery_forced_charge_discharge_cmd2', "Forced charge") %}
              {{ems_forced_charge}}
            {% elif is_state('input_select.set_sg_battery_forced_charge_discharge_cmd2', "Forced discharge") %}
              {{ems_forced_discharge}}
            {% else %}
              {{ems_stop_default}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_cmd_input_select_update2"
    alias: "sungrow inverter update battery forced charge discharge cmd input select update2"
    description: "Updates Sungrow battery forced charge discharge cmd input select"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_forced_charge_discharge_cmd2
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.battery_forced_charge_discharge_cmd2', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd2
        data:
          option: "{{ states('sensor.battery_forced_charge_discharge_cmd2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_ems_mode2"
    alias: "sungrow inverter update EMS mode2"
    description: "Updates EMS mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_ems_mode2
    condition: []
    variables:
      ems_mode_self_consume: 0
      ems_mode_forced: 2
      ems_mode_external: 3
      ems_mode_vpp: 4
      ems_mode_microgrid: 8
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 13049 # reg 13050
          value: >
            {% if is_state('input_select.set_sg_ems_mode2', "Self-consumption mode (default)") %}
              {{ems_mode_self_consume}}
            {% elif is_state('input_select.set_sg_ems_mode2', "Forced mode") %}
              {{ems_mode_forced}}
            {% elif is_state('input_select.set_sg_ems_mode2', "External EMS") %}
              {{ems_mode_external}}
            {% elif is_state('input_select.set_sg_ems_mode2', "VPP") %}
              {{ems_mode_vpp}}
            {% elif is_state('input_select.set_sg_ems_mode2', "MicroGrid") %}
              {{ems_mode_microgrid}}
            {% else %}
              {{ems_mode_self_consume}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_export_power_limit_mode_update2"
    alias: "sungrow inverter export power limit mode update2"
    description: "Updates Enable/Disable for export power limit mode"
    trigger:
      - platform: state
        entity_id:
          - sensor.export_power_limit_mode_raw2
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.export_power_limit_mode_raw2', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_export_power_limit_mode2
        data:
          option: >
            {% if ((states('sensor.export_power_limit_mode_raw2') |int) == 0x00AA) %}
              Enabled
            {% elif ((states('sensor.export_power_limit_mode_raw2') |int) == 0x0055) %}
              Disabled
            {% endif %}
    mode: single

  - id: "automation_sungrow_export_power_limit_mode2"
    alias: "sungrow inverter export power limit mode2"
    description: "Set export power limit mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_export_power_limit_mode2
    condition: []
    variables:
      export_limit_enable: 0xAA
      export_limit_disable: 0x55
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 13086 # reg 13087
          value: >
            {% if is_state('input_select.set_sg_export_power_limit_mode2', "Enabled") %}
              {{export_limit_enable}}
            {% elif is_state('input_select.set_sg_export_power_limit_mode2', "Disabled") %}
              {{export_limit_disable}}
            {% else %}
              {{export_limit_disable}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_export_power_limit_update2"
    alias: "sungrow inverter export power limit update2"
    description: "Updates export power limit slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.export_power_limit2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_export_power_limit2
        data:
          value: "{{ states('sensor.export_power_limit2') }}"
    mode: single

  - id: "automation_sungrow_inverter_set_export_power_limit2"
    alias: "sungrow inverter export power limit2"
    description: "Sets export power limit"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_export_power_limit2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 13073 # reg 13074
          value: "{{ states('input_number.set_sg_export_power_limit2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_ems_mode_input_select_update2"
    alias: "sungrow inverter update EMS mode input select update2"
    description: "Updates EMS mode input select"
    trigger:
      - platform: state
        entity_id:
          - sensor.ems_mode_selection2
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.ems_mode_selection2', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_ems_mode2
        data:
          option: "{{ states('sensor.ems_mode_selection2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_power2"
    alias: "sungrow inverter update battery forced charge discharge power2"
    description: "Sets battery forced charge discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_forced_charge_discharge_power2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 13051 # reg 13052
          value: "{{ states('input_number.set_sg_forced_charge_discharge_power2') | int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_power_input_slider_update2"
    alias: "sungrow inverter update battery forced charge discharge power input slider update2"
    description: "Updates battery forced charge discharge power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_forced_charge_discharge_power2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_forced_charge_discharge_power2
        data:
          value: "{{ states('sensor.battery_forced_charge_discharge_power2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_charge_power2"
    alias: "sungrow inverter update battery max charge power2"
    description: "Sets battery max charge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_battery_max_charge_power2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 33046 # reg 33047
          value: "{{ states('input_number.set_sg_battery_max_charge_power2') |float /10 |int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_charge_power_input_slider_update2"
    alias: "sungrow inverter update battery max charge power input slider update2"
    description: "Updates battery max charge power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_max_charge_power2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_battery_max_charge_power2
        data:
          value: "{{ states('sensor.battery_max_charge_power2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_discharge_power2"
    alias: "sungrow inverter update battery max discharge power2"
    description: "Sets battery max discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_battery_max_discharge_power2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 33047 # reg 33048
          value: "{{ states('input_number.set_sg_battery_max_discharge_power2')  |float /10 |int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_discharge_power_input_slider_update2"
    alias: "sungrow inverter update battery max discharge power input slider update2"
    description: "Updates battery max discharge power input slider2"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_max_discharge_power2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_battery_max_discharge_power2
        data:
          value: "{{ states('sensor.battery_max_discharge_power2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_charging_start_power2"
    alias: "sungrow inverter update battery charging start power2"
    description: "Sets battery charging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_battery_charging_start_power2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 33148 # reg 33149
          value: "{{ states('input_number.set_sg_battery_charging_start_power2') |float /10 |int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_charging_start_power_input_slider_update2"
    alias: "sungrow inverter update battery charging start power input slider update2"
    description: "Updates battery charging start power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_charging_start_power2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_battery_charging_start_power2
        data:
          value: "{{ states('sensor.battery_charging_start_power2') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_discharging_start_power2"
    alias: "sungrow inverter update battery discharging start power2"
    description: "Sets battery discharging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_battery_discharging_start_power2
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 33149 # reg 33150
          value: "{{ states('input_number.set_sg_battery_discharging_start_power2') |float /10 | int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_discharging_start_power_input_slider_update2"
    alias: "sungrow inverter update battery discharging start power input slider update2"
    description: "Updates battery discharging start power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_discharging_start_power2
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_battery_discharging_start_power2
        data:
          value: "{{ states('sensor.battery_discharging_start_power2') }}"
    mode: single

  - id: "automation_sungrow_inverter_global_mpp_scan_manual_update2"
    alias: "sungrow inverter global mpp scan manual update2"
    description: "Updates Enable/Disable for global mpp scan manual"
    trigger:
      - platform: state
        entity_id:
          - sensor.global_mpp_scan_manual_raw2
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.global_mpp_scan_manual_raw2', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_global_mpp_scan_manual2
        data:
          option: >
            {% if ((states('sensor.global_mpp_scan_manual_raw2') | int(default=0)) == 0x00AA) %}
              Enabled
            {% elif ((states('sensor.global_mpp_scan_manual_raw2') | int(default=0)) == 0x0055) %}
              Disabled
            {% endif %}
    mode: single

  - id: "automation_sungrow_global_mpp_scan_manual2"
    alias: "sungrow inverter global mpp scan manual2"
    description: "Set global mpp scan manual"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_global_mpp_scan_manual2
    condition: []
    variables:
      export_limit_enable: 0xAA
      export_limit_disable: 0x55
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx2
          slave: !secret sungrow_modbus_slave2
          address: 30229 # reg 30230
          value: >
            {% if is_state('input_select.set_sg_global_mpp_scan_manual2', "Enabled") %}
              {{export_limit_enable}}
            {% elif is_state('input_select.set_sg_global_mpp_scan_manual2', "Disabled") %}
              {{export_limit_disable}}
            {% else %}
              {{export_limit_disable}}
            {% endif %}
    mode: single

# Usage: Use these scripts to simplify automations
# Example (Adjust to your needs with appropriate trigger):
# automation:
#  - alias: Forced Battery Charging Management
#    description: "Manages forced battery charging during cheapest hours."
#   trigger:
#      - platform: state
#        entity_id:
#          - binary_sensor.cheapest_hours_for_charging_timer
#    action:
#      - choose:
#          - conditions:
#              - condition: state
#                entity_id: binary_sensor.cheapest_hours_for_charging_timer
#                state: 'on'
#            sequence:
#              - service: script.sg_forced_charge_battery_mode
#          - conditions:
#              - condition: state
#                entity_id: binary_sensor.cheapest_hours_for_charging_timer
#                state: 'off'
#            sequence:
#              - service: script.sg_self_consumption_mode

script:
  sg_set_forced_discharge_battery_mode2:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_ems_mode2
          option: "Forced mode"
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd2
          option: "Forced discharge"
      # Uncomment notify action lines below for push notifications to mobile devices
      # - service: notify.notify
      #   data:
      #     title: "Forced Battery Discharge"
      #     message: "Switched to Forced Battery Discharge mode"

  sg_set_forced_charge_battery_mode2:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_ems_mode2
          option: "Forced mode"
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd2
          option: "Forced charge"

  sg_set_battery_bypass_mode2:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_ems_mode2
          option: "Forced mode"
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd2
          option: "Stop (default)"

  sg_set_self_consumption_mode2:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_ems_mode2
          option: "Self-consumption mode (default)"
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd2
          option: "Stop (default)"
