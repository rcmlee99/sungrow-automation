# Home Assistant Sungrow third inverter integration
# https://github.com/rcmlee99/sungrow-automation/tree/main/config_threeinverter
# by Roger Lee
# last update: 2025-07-26
#
# Note: This YAML file will only work with Home Assistant >= 2023.10

modbus:
  - name: SungrowSHx3
    type: tcp
    host: !secret sungrow_modbus_host_ip3
    port: !secret sungrow_modbus_port3
    sensors:
      - name: Sungrow device type code3
        unique_id: sg_dev_code3
        device_address: !secret sungrow_modbus_slave3
        address: 4999 # reg 5000
        input_type: input
        data_type: uint16
        scan_interval: 600

      - name: Daily PV generation & battery discharge3
        unique_id: sg_daily_pv_gen_battery_discharge3
        device_address: !secret sungrow_modbus_slave3
        address: 5002 # reg 5003
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total PV generation & battery discharge3
        unique_id: sg_total_pv_gen_battery_discharge3
        device_address: !secret sungrow_modbus_slave3
        address: 5003 # reg 5004
        input_type: input
        data_type: uint32
        swap: word
        unit_of_measurement: kWh
        precision: 1
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Inverter temperature3
        unique_id: sg_inverter_temperature3
        device_address: !secret sungrow_modbus_slave3
        address: 5007 # reg 5008
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: °C
        device_class: Temperature
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: MPPT1 voltage3
        unique_id: sg_mppt1_voltage3
        device_address: !secret sungrow_modbus_slave3
        address: 5010 # reg 5011
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10
      - name: MPPT1 current3
        unique_id: sg_mppt1_current3
        device_address: !secret sungrow_modbus_slave3
        address: 5011 # reg 5012
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: MPPT2 voltage3
        unique_id: sg_mppt2_voltage3
        device_address: !secret sungrow_modbus_slave3
        address: 5012 # reg 5013
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: MPPT2 current3
        unique_id: sg_mppt2_current3
        device_address: !secret sungrow_modbus_slave3
        address: 5013 # reg 5014
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: MPPT3 voltage3
        unique_id: sg_mppt3_voltage3
        device_address: !secret sungrow_modbus_slave3
        address: 5014 # reg 5015
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: MPPT3 current3
        unique_id: sg_mppt3_current3
        device_address: !secret sungrow_modbus_slave3
        address: 5015 # reg 5016
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Total DC power3
        unique_id: sg_total_dc_power3
        device_address: !secret sungrow_modbus_slave3
        address: 5016 # reg 5017
        input_type: input
        data_type: uint32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Phase A voltage3
        unique_id: sg_phase_a_voltage3
        device_address: !secret sungrow_modbus_slave3
        address: 5018 # reg: 5019
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase B voltage3
        unique_id: sg_phase_b_voltage3
        device_address: !secret sungrow_modbus_slave3
        address: 5019 # reg: 5020
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase C voltage3
        unique_id: sg_phase_c_voltage3
        device_address: !secret sungrow_modbus_slave3
        address: 5020 # reg: 5021
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Grid frequency3
        unique_id: sg_grid_frequency3
        device_address: !secret sungrow_modbus_slave3
        address: 5035 # reg 5036
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: "Hz"
        device_class: frequency
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Reactive power3
        unique_id: sg_reactive_power3
        device_address: !secret sungrow_modbus_slave3
        address: 5032 # reg 5033
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Power factor3
        unique_id: sg_power_factor3
        device_address: !secret sungrow_modbus_slave3
        address: 5034 # reg 5035
        input_type: input
        data_type: int16
        precision: 3
        unit_of_measurement: "%"
        device_class: power_factor
        state_class: measurement
        scale: 0.001
        scan_interval: 10

      #https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?pageNo=13
      #Meter Active Power: 5601-5602 S32 W (Energiezähler Wirkleistung)
      #Meter Phase A Active Power: 5603-5604 S32 W (Stromzähler Phase A Wirkleistung)
      #Meter Phase B Active Power: 5605-5606 S32 W (Stromzähler Phase B Wirkleistung)
      #Meter Phase C Active Power: 5607-5608 S32 W (Stromzähler Phase C Wirkleistung)
      - name: Meter active power raw3
        unique_id: sg_meter_active_power_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 5600 # reg 5601
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Meter phase A active power raw3
        unique_id: sg_meter_phase_a_active_power_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 5602 # reg 5603
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Meter phase B active power raw3
        unique_id: sg_meter_phase_b_active_power_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 5604 # reg 5605
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Meter phase C active power raw3
        unique_id: sg_meter_phase_c_active_power_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 5606 # reg 5607
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: BDC rated power3
        unique_id: sg_bdc_rated_power3
        device_address: !secret sungrow_modbus_slave3
        address: 5627 # reg 5628
        input_type: input
        data_type: uint16
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        scale: 100
        scan_interval: 600

      - name: BMS max. charging current3
        unique_id: sg_bms_max_charging_current3
        device_address: !secret sungrow_modbus_slave3
        address: 5634 # reg 5635
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 1
        scan_interval: 60

      - name: BMS max. discharging current3
        unique_id: sg_bms_max_discharging_current3
        device_address: !secret sungrow_modbus_slave3
        address: 5635 # reg 5636
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 1
        scan_interval: 60

      #https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?pageNo=13
      #Phase A Backup Power: 5723 S16 W (Backup Leistung Phase A)
      #Phase B Backup Power: 5724 S16 W (Backup Leistung Phase B)
      #Phase C Backup Power: 5725 S16 W (Backup Leistung Phase C)
      - name: Total backup power3
        device_address: !secret sungrow_modbus_slave3
        unique_id: sg_total_backup_power3
        address: 5725 # reg 5726
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Backup phase A power3
        unique_id: sg_backup_phase_a_power3
        device_address: !secret sungrow_modbus_slave3
        address: 5722 # reg 5723
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Backup phase B power3
        unique_id: sg_backup_phase_b_power3
        device_address: !secret sungrow_modbus_slave3
        address: 5723 # reg 5724
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Backup phase C power3
        unique_id: sg_backup_phase_c_power3
        device_address: !secret sungrow_modbus_slave3
        address: 5724 # reg 5725
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      # https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?postID=3334464#post3324464

      # - name: System state3
      #   unique_id: sg_system_state3
      #   device_address: !secret sungrow_modbus_slave3
      #   address: 12999 # reg 13000
      #   input_type: input
      #   data_type: uint16
      #   precision: 0
      #   scale: 1
      #   state_class: measurement
      #   scan_interval: 10

      # register running state is not available for certain SH*RS inverters
      # template sensors are used to determine the states based on other sensors
      - name: Running state3
        unique_id: sg_running_state3
        device_address: !secret sungrow_modbus_slave3
        address: 13000 # reg 13001
        input_type: input
        data_type: uint16
        precision: 0
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Daily PV generation3
        unique_id: sg_daily_pv_generation3
        device_address: !secret sungrow_modbus_slave3
        address: 13001 # reg 13002
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total PV generation3
        unique_id: sg_total_pv_generation3
        device_address: !secret sungrow_modbus_slave3
        address: 13002 # reg 13003
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily exported energy from PV3
        unique_id: sg_daily_exported_energy_from_PV3
        device_address: !secret sungrow_modbus_slave3
        address: 13004 # reg 13005
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total exported energy from PV3
        unique_id: sg_total_exported_energy_from_pv3
        device_address: !secret sungrow_modbus_slave3
        address: 13005 # reg 13006
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Load Power3
        unique_id: sg_load_power3
        device_address: !secret sungrow_modbus_slave3
        address: 13007 # reg 13008
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      # this value returns a positive value when exporting and a negative value when importing power
      - name: Export power raw3
        unique_id: sg_battery_export_power_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 13009 # reg 13010
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Daily battery charge from PV3
        unique_id: sg_daily_battery_charge_from_pv3
        device_address: !secret sungrow_modbus_slave3
        address: 13011 # reg 13012
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total battery charge from PV3
        unique_id: sg_total_battery_charge_from_pv3
        device_address: !secret sungrow_modbus_slave3
        address: 13012 # reg 13013
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily direct energy consumption3
        unique_id: sg_daily_direct_energy_consumption3
        device_address: !secret sungrow_modbus_slave3
        address: 13016 # reg 13017
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total direct energy consumption3
        unique_id: sg_total_direct_energy_consumption3
        device_address: !secret sungrow_modbus_slave3
        address: 13017 # reg 13018
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Battery voltage3
        unique_id: sg_battery_voltage3
        device_address: !secret sungrow_modbus_slave3
        address: 13019 # reg 13020
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      # note: datasheet states that this value is unsigned, but it is acually signed:
      # https://github.com/mkaiser/Sungrow-SHx-Inverter-Modbus-Home-Assistant/issues/304
      - name: Battery current3
        unique_id: sg_battery_current3
        device_address: !secret sungrow_modbus_slave3
        address: 13020 # reg 13021
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        state_class: measurement
        device_class: Current
        scale: 0.1
        scan_interval: 10

      # always positive battery power
      # use binary_sensor.battery_charging | discharging to retrieve the direction of the energy flow
      - name: Battery power raw3
        unique_id: sg_battery_power_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 13021 # reg 13022
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Battery level3
        unique_id: sg_battery_level3
        device_address: !secret sungrow_modbus_slave3
        address: 13022 # reg 13023
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 60

      - name: Battery state of health3
        unique_id: sg_battery_state_of_health3
        device_address: !secret sungrow_modbus_slave3
        address: 13023 # reg 13024
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: "%"
        state_class: measurement
        scale: 0.1
        scan_interval: 600

      - name: Battery temperature3
        unique_id: sg_battery_temperature3
        device_address: !secret sungrow_modbus_slave3
        address: 13024 # reg 13025
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: °C
        device_class: Temperature
        state_class: measurement
        scale: 0.1
        scan_interval: 60

      - name: Daily battery discharge3
        unique_id: sg_daily_battery_discharge3
        device_address: !secret sungrow_modbus_slave3
        address: 13025 # reg 13026
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total battery discharge3
        unique_id: sg_total_battery_discharge3
        device_address: !secret sungrow_modbus_slave3
        address: 13026 # reg 13027
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Phase A current3
        unique_id: sg_phase_a_current3
        device_address: !secret sungrow_modbus_slave3
        address: 13030 # reg 13031
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase B current3
        unique_id: sg_phase_b_current3
        device_address: !secret sungrow_modbus_slave3
        address: 13031 # reg 13032
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase C current3
        unique_id: sg_phase_c_current3
        device_address: !secret sungrow_modbus_slave3
        address: 13032 # reg 13033
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Total active power3
        unique_id: sg_total_active_power3
        device_address: !secret sungrow_modbus_slave3
        address: 13033 # reg 13034
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Daily imported energy3
        unique_id: sg_daily_imported_energy3
        device_address: !secret sungrow_modbus_slave3
        address: 13035 # reg 13036
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total imported energy3
        unique_id: sg_total_imported_energy3
        device_address: !secret sungrow_modbus_slave3
        address: 13036 # reg 13037
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily battery charge3
        unique_id: sg_daily_battery_charge3
        device_address: !secret sungrow_modbus_slave3
        address: 13039 # reg 13040
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total battery charge3
        unique_id: sg_total_battery_charge3
        device_address: !secret sungrow_modbus_slave3
        address: 13040 # reg 13041
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily exported energy3
        unique_id: sg_daily_exported_energy3
        device_address: !secret sungrow_modbus_slave3
        address: 13044 # reg 13045
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total exported energy3
        unique_id: sg_total_exported_energy3
        device_address: !secret sungrow_modbus_slave3
        address: 13045 # reg 13046
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      #####################
      # holding registers
      #####################
      - name: Inverter start stop3
        unique_id: sg_inverter_start_stop3
        device_address: !secret sungrow_modbus_slave3
        address: 12999 # reg 13000
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      - name: EMS mode selection raw3
        unique_id: sg_ems_mode_selection_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 13049 # reg 13050
        input_type: holding
        data_type: uint16
        state_class: measurement
        scan_interval: 10

      - name: Battery forced charge discharge cmd raw3
        unique_id: sg_battery_forced_charge_discharge_cmd_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 13050 # reg 13051
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      - name: Battery forced charge discharge power3
        unique_id: sg_battery_forced_charge_discharge_power3
        device_address: !secret sungrow_modbus_slave3
        address: 13051 # reg 13052
        input_type: holding
        data_type: uint16
        precision: 0
        # datasheet says:
        # 0 to 5000 W for SH*K-*
        # 0 to 100 % for SH*.0RT
        # for my SH10RT it is set in Watt, not in %
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scan_interval: 10

      - name: Max SoC3
        unique_id: sg_max_soc3
        device_address: !secret sungrow_modbus_slave3
        address: 13057 # reg 13058
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Min SoC3
        unique_id: sg_min_soc3
        device_address: !secret sungrow_modbus_slave3
        address: 13058 # reg 13059
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Export power limit3
        unique_id: sg_export_power_limit3
        device_address: !secret sungrow_modbus_slave3
        address: 13073 # reg 13074
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Export power limit mode raw3
        unique_id: sg_export_power_limit_mode_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 13086 # reg 13087
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      #undocumented sensor (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      # - name: Reserved SoC for backup3
      #   unique_id: sg_reserved_soc_for_backup3
      #   device_address: !secret sungrow_modbus_slave3
      #   address: 13099 # reg 13100
      #   input_type: holding
      #   data_type: uint16
      #   unit_of_measurement: "%"
      #   device_class: battery
      #   state_class: measurement
      #   scale: 1
      #   scan_interval: 10

      - name: Battery max charge power3
        unique_id: sg_battery_max_charge_power3
        device_address: !secret sungrow_modbus_slave3
        address: 33046 # reg 33047
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

      - name: Battery max discharge power3
        unique_id: sg_battery_max_discharge_power3
        device_address: !secret sungrow_modbus_slave3
        address: 33047 # reg 33048
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

      #undocumented sensor (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      - name: Battery capacity3
        unique_id: sg_battery_capacity3
        device_address: !secret sungrow_modbus_slave3
        address: 33048 # reg 33049
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy_storage
        scale: 0.01
        scan_interval: 600

      #undocumented sensor (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      - name: Battery charging start power3
        unique_id: sg_battery_charging_start_power3
        device_address: !secret sungrow_modbus_slave3
        address: 33148 # reg 33149
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

      #undocumented sensor (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      # - name: Battery discharging start power3
      #   unique_id: sg_battery_discharging_start_power3
      #   device_address: !secret sungrow_modbus_slave3
      #   address: 33149 # reg 33150
      #   input_type: holding
      #   data_type: uint16
      #   precision: 0
      #   unit_of_measurement: W
      #   device_class: power
      #   state_class: measurement
      #   scale: 10
      #   scan_interval: 10

      - name: Global mpp scan manual raw3
        unique_id: sg_global_mpp_scan_manual_raw3
        device_address: !secret sungrow_modbus_slave3
        address: 30229 # reg 30230
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

sensor:
  - platform: filter
    name: "Daily consumed energy (filtered)3"
    entity_id: sensor.daily_consumed_energy3
    # commented following line, due to: 'device_class' is an invalid option for 'sensor.filter', check: device_class
    # device_class: energy
    # commented following line, due to: 'state_class' is an invalid option for 'sensor.filter', check: state_class
    # state_class: total_increasing
    filters:
      - filter: time_simple_moving_average
        window_size: "00:05"
        precision: 2

# 'virtual' template sensors for better readability
template:
  - binary_sensor:
      - name: PV generating3
        unique_id: sg_pv_generating3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state3', 'unavailable')
          and not is_state('sensor.total_dc_power3', 'unavailable')
          }}
        state: >-
          {% if states('sensor.running_state3')|is_number %}
            {# use available sensor running_state3 #}
            {{ states('sensor.running_state3')|int |bitwise_and(0x1) }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state3 #}
            {% if states('sensor.total_dc_power3')|int > 0 %}
              1
            {% else %}
              0
            {% endif %}
          {% endif %}

      - name: PV generating (delay)3
        unique_id: sg_pv_generating_delay3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.pv_generating3', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.pv_generating3') }}"

      - name: Battery charging3
        unique_id: sg_battery_charging3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state3', 'unavailable')
          or
            (   not is_state('sensor.ems_mode_selection_raw3', 'unavailable')
            and not is_state('sensor.battery_forced_charge_discharge_cmd_raw3', 'unavailable')
            and not is_state('sensor.battery_power_raw3', 'unavailable')
            and not is_state('sensor.total_dc_power3', 'unavailable')
            and not is_state('sensor.load_power3', 'unavailable')
            )
          }}
        state: >-
          {% if states('sensor.running_state3')|is_number %}
            {# use available sensor running_state3 #}
            {% if states('sensor.running_state3')|int|bitwise_and(0x2) > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            {# workaround for SH*RS inverters without working running_state3 #}
            {% if (states('sensor.ems_mode_selection3') ) == "Forced mode" %}
              {# EMS forced mode #}
              {% if (states('sensor.battery_forced_charge_discharge_cmd3') == "Forced charge") %}
                {# in mode Forced charge #}
                {% if (states('sensor.battery_power_raw3')|int > 0 ) %}
                  {# power flow from/to battery #}
                  on
                {% else %}
                  {# no power flow from/to battery #}
                  off
                {% endif %}
              {% else %}
                {# in EMS mode, but not in mode Forced charge #}
                off
              {% endif %}
            {% else %}
              {# not in EMS forced mode, assuming self consumption mode #}
              {% if states('sensor.total_dc_power3')|int > states('sensor.load_power3')|int %}
                {# more power generated than consumed. assuming battery charging #}
                on
              {% else %}
                off
              {% endif %}
            {% endif %}
          {% endif %}

      - name: Battery charging (delay)3
        unique_id: sg_battery_charging_delay3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.battery_charging3', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.battery_charging3') }}"

      - name: Battery discharging3
        unique_id: sg_battery_discharging3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state3', 'unavailable')
          or
            (   not is_state('sensor.ems_mode_selection_raw3', 'unavailable')
            and not is_state('sensor.battery_forced_charge_discharge_cmd_raw3', 'unavailable')
            and not is_state('sensor.battery_power_raw3', 'unavailable')
            and not is_state('sensor.total_dc_power3', 'unavailable')
            and not is_state('sensor.load_power3', 'unavailable')
            )
          }}
        state: >-
          {% if states('sensor.running_state3')|is_number %}
            {# use available sensor running_state3 #}
            {% if states('sensor.running_state3')|int|bitwise_and(0x4) > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            {# workaround for SH*RS inverters without working running_state3 #}
            {% if (states('sensor.ems_mode_selection3') ) == "Forced mode" %}
              {# EMS forced mode #}
              {% if (states('sensor.battery_forced_charge_discharge_cmd3') == "Forced discharge") %}
                {# in mode Forced discharge #}
                {% if (states('sensor.battery_power_raw3')|int > 0 ) %}
                  {# power flow from/to battery #}
                  on
                {% else %}
                  {# no power flow from/to battery #}
                  off
                {% endif %}
              {% else %}
                {# in EMS mode, but not in mode Forced charge #}
                off
              {% endif %}
            {% else %}
              {# not in EMS forced mode, assuming self consumption mode #}
              {% if ( ( states('sensor.total_dc_power3')|int < states('sensor.load_power3')|int ) ) and states('sensor.battery_power_raw3')|int > 0 %}
                {# more power consumed than generated and some battery power --> assuming battery discharging #}
                on
              {% else %}
                off
              {% endif %}
            {% endif %}
          {% endif %}

      - name: Battery discharging (delay)3
        unique_id: sg_battery_discharging_delay3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.battery_discharging3', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.battery_discharging3') }}"

      - name: Exporting power3
        unique_id: sg_exporting_power3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state3', 'unavailable')
          and not is_state('sensor.export_power_raw3', 'unavailable')
          }}
        state: >-
          {% if states('sensor.running_state3')|is_number %}
            {# use available sensor running_state3#}
            {{ states('sensor.running_state3')|int|bitwise_and(0x10) > 0 }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state3 #}
            {% if states('sensor.export_power_raw3')|int > 0 %}
              1
            {% else %}
              0
            {% endif %}
          {% endif %}

      - name: Exporting power (delay)3
        unique_id: sg_exporting_power_delay3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.exporting_power3', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.exporting_power3') }}"

      - name: Importing power3
        unique_id: sg_importing_power3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{
          not is_state('sensor.running_state3', 'unavailable')
          and not is_state('sensor.running_state3', 'unavailable')
          }}
        state: >-
          {% if states('sensor.running_state3')|is_number %}
            {# use available sensor running_state3 #}
            {{ states('sensor.running_state3')|int|bitwise_and(0x20) > 0 }}
          {% else %}
            {# workaround for SH*RS inverters without working running_state3 #}
            {% if states('sensor.export_power_raw3')|int < 0 %}
              1
            {% else %}
              0
            {% endif %}
          {% endif %}

      - name: Importing power (delay)3
        unique_id: sg_importing_power_delay3
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.importing_power3', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.importing_power3') }}"

  - sensor:
      - name: MPPT1 power3
        unique_id: sg_mppt1_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.mppt1_voltage3', 'unavailable')
          and not is_state('sensor.mppt1_current3', 'unavailable')
          }}
        state: "{{ (states('sensor.mppt1_voltage3') | float * states('sensor.mppt1_current3') | float) |int }}"

      - name: MPPT2 power3
        unique_id: sg_mppt2_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.mppt2_voltage3', 'unavailable')
          and not is_state('sensor.mppt2_current3', 'unavailable' )
          }}
        state: "{{ (states('sensor.mppt2_voltage3') | float * states('sensor.mppt2_current3') | float) |int }}"

      - name: MPPT3 power3
        unique_id: sg_mppt3_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.mppt3_voltage3', 'unavailable')
          and not is_state('sensor.mppt3_current3', 'unavailable' )
          }}
        state: "{{ (states('sensor.mppt3_voltage3') | float * states('sensor.mppt3_current3') | float) |int }}"

      - name: Phase A power3
        unique_id: sg_phase_a_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.phase_a_voltage3', 'unavailable')
          and not is_state('sensor.phase_a_current3', 'unavailable')
          }}
        state: "{{ (states('sensor.phase_a_voltage3') | float * states('sensor.phase_a_current3') | float) |int }}"

      - name: Phase B power3
        unique_id: sg_phase_b_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.phase_b_voltage3', 'unavailable')
          and not is_state('sensor.phase_b_current3', 'unavailable')
          }}
        state: "{{ (states('sensor.phase_b_voltage3') | float * states('sensor.phase_b_current3') | float) |int }}"

      - name: Phase C power3
        unique_id: sg_phase_c_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.phase_c_voltage3', 'unavailable')
          and not is_state('sensor.phase_c_current3', 'unavailable')
          }}
        state: "{{ (states('sensor.phase_c_voltage3') | float * states('sensor.phase_c_current3') | float) |int }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - name: Meter active power3
        unique_id: sg_meter_active_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.meter_active_power_raw3', 'unavailable')
          and states('sensor.meter_active_power_raw3')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_active_power_raw3') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - name: Meter phase A active power3
        unique_id: sg_meter_phase_a_active_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.meter_phase_a_active_power_raw3', 'unavailable')
          and states('sensor.meter_phase_a_active_power_raw3')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_phase_a_active_power_raw3') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - name: Meter phase B active power3
        unique_id: sg_meter_phase_b_active_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.meter_phase_b_active_power_raw3', 'unavailable')
          and states('sensor.meter_phase_b_active_power_raw3')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_phase_b_active_power_raw3') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - name: Meter phase C active power3
        unique_id: sg_meter_phase_c_active_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.meter_phase_c_active_power_raw3', 'unavailable')
          and states('sensor.meter_phase_c_active_power_raw3')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_phase_c_active_power_raw3') }}"

      - name: Sungrow inverter state3
        unique_id: sg_inverter_state3
        device_class: enum
        availability: "{{ not is_state('sensor.system_state3', 'unavailable') }}"
        state: >-
          {% if ((states('sensor.system_state3') |int) in [0x0000,0x0040]) %}
            Running
          {% elif ((states('sensor.system_state3') |int) == 0x0410) %}
            Off-grid Charge
          {% elif ((states('sensor.system_state3') |int) == 0x0200) %}
            Update Failed
          {% elif ((states('sensor.system_state3') |int) == 0x0400) %}
            Maintain mode
          {% elif ((states('sensor.system_state3') |int) == 0x0800) %}
            Forced mode
          {% elif ((states('sensor.system_state3') |int) == 0x1000) %}
            Off-grid mode
          {% elif ((states('sensor.system_state3') |int) == 0x1111) %}
            Un-Initialized
          {% elif ((states('sensor.system_state3') |int) in [0x0010,0x12000]) %}
            Initial Standby
          {% elif ((states('sensor.system_state3') |int) in [0x1300,0x0002]) %}
            Shutdown
          {% elif ((states('sensor.system_state3') |int) in [0x1400,0x0008] ) %}
            Standby
          {% elif ((states('sensor.system_state3') |int) in [0x1500,0x0004] ) %}
            Emergency Stop
          {% elif ((states('sensor.system_state3') |int) in [0x1600,0x0020]) %}
            Startup
          {% elif ((states('sensor.system_state3') |int) == 0x1700) %}
            AFCI self test shutdown
          {% elif ((states('sensor.system_state3') |int) == 0x1800) %}
            Intelligent Station Building Status
          {% elif ((states('sensor.system_state3') |int) == 0x1900) %}
            Safe Mode
          {% elif ((states('sensor.system_state3') |int) == 0x2000) %}
            Open Loop
          {% elif ((states('sensor.system_state3') |int) == 0x2501) %}
            Restarting
          {% elif ((states('sensor.system_state3') |int) == 0x4000) %}
            External EMS mode
          {% elif ((states('sensor.system_state3') |int) == in [0x55000,0x0100]) %}
            Fault
          {% elif ((states('sensor.system_state3') |int) == in [0x8000,0x0001]) %}
            Stop
          {% elif ((states('sensor.system_state3') |int) == 0x8100) %}
            De-rating Running
          {% elif ((states('sensor.system_state3') |int) == 0x8200) %}
            Dispatch Run
          {% elif ((states('sensor.system_state3') |int) == 0x9100) %}
            Warn Running
          {% else %}
            Unknown - should not see me! {{ (states('sensor.system_state3') |int) }}
          {% endif %}

      - name: Sungrow device type3
        unique_id: sg_device_type3
        availability: "{{ not is_state('sensor.sungrow_device_type_code3', 'unavailable') }}"
        device_class: enum
        state: >-
          {% if ((states('sensor.sungrow_device_type_code3') |int)  == 0x0D06) %}
            SH3K6
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D07) %}
            SH4K6
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D09) %}
            SH5K-30
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D03) %}
            SH5K-V13
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D0A) %}
            SH3K6-30
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D0B) %}
            SH4K6-30
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D0C) %}
            SH5K-30
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D17) %}
            SH3.RS
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D0D) %}
            SH3.6RS
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D18) %}
            SH4.0RS
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D0F) %}
            SH5.0RS
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D10) %}
          SH6.0RS
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D1A) %}
          SH8.0RS
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D1B) %}
            SH10RS
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E00) %}
          SH5.0RT
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E01) %}
            SH6.0RT
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E03) %}
            SH8.0RT
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E03) %}
            SH10RT
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E10) %}
            SH5.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E11) %}
            SH6.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E12) %}
            SH8.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E13) %}
            SH10RT-20
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E0C) %}
            SH5.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E0D) %}
            SH6.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E0E) %}
            SH8.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E0F) %}
            SH10RT-V112
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E08) %}
            SH5.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E09) %}
            SH6.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E0A) %}
            SH8.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E0B) %}
            SH10RT-V122
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E20) %}
            SH5T-V11
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E21) %}
            SH6T-V11
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E22) %}
            SH8T-V11
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E23) %}
            SH10T-V11
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E24) %}
            SH12T-V11
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E25) %}
            SH15T-V11
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E26) %}
            SH20T-V11
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E28) %}
            SH25T-V11
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0D0E) %}
            SH4.6RS
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E26) %}
            SH20T
          {% elif ((states('sensor.sungrow_device_type_code3') |int) == 0x0E28) %}
            SH25T
          {% else %}
            Unknown device code: {{ '%0x' % (states('sensor.sungrow_device_type_code3') |int)  }}
          {% endif %}

      # make the sensor battery_forced_charge_discharge_cmd more human readable
      # Inverter States from modbus reference manual
      # 0xAA forced charge
      # 0xBB forced discharge
      # 0xCC Stop (default)
      - name: Battery forced charge discharge cmd3
        unique_id: sg_battery_forced_charge_discharge_cmd3
        availability: "{{ not is_state('sensor.battery_forced_charge_discharge_cmd_raw3', 'unavailable') }}"
        # TODO: test state_class with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.battery_forced_charge_discharge_cmd_raw3') |int) == 0x00AA) %}
            Forced charge
          {% elif ((states('sensor.battery_forced_charge_discharge_cmd_raw3') |int)  == 0x00BB) %}
            Forced discharge
          {% elif ((states('sensor.battery_forced_charge_discharge_cmd_raw3') |int)  == 0x00CC) %}
            Stop (default)
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - name: Export power limit mode3
        unique_id: export_power_limit_mode3
        availability: "{{ not is_state('sensor.export_power_limit_mode_raw3', 'unavailable') }}"
        # TODO: test state_class with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.export_power_limit_mode_raw3') |int) == 0x00AA) %}
            Enabled
          {% elif ((states('sensor.export_power_limit_mode_raw3') |int)  == 0x0055) %}
            Disabled
          {% else %}
            Unknown - should not see me!
          {% endif %}

      # make the sensor ems_selection_raw more human readable
      - name: EMS mode selection3
        unique_id: sg_ems_mode_selection3
        availability: "{{ not is_state('sensor.ems_mode_selection_raw3', 'unavailable') }}"
        # TODO: test state_class with enum with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.ems_mode_selection_raw3') |int) == 0) %}
            Self-consumption mode (default)
          {% elif ((states('sensor.ems_mode_selection_raw3') |int) == 2) %}
            Forced mode
          {% elif ((states('sensor.ems_mode_selection_raw3') |int) == 3) %}
            External EMS
          {% elif ((states('sensor.ems_mode_selection_raw3') |int) == 4) %}
            VPP
          {% elif ((states('sensor.ems_mode_selection_raw3') |int) == 8) %}
            MicroGrid
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - name: Signed battery power3 # positive if charging and negative if discharging
        unique_id: sg_signed_battery_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('binary_sensor.battery_charging3', 'unavailable')
          and not is_state('binary_sensor.battery_discharging3', 'unavailable')
          and not is_state('sensor.battery_power_raw3', 'unavailable')
          }}
        state: >-
          {% if is_state('binary_sensor.battery_charging3', 'on') %}
            {{ (states('sensor.battery_power_raw3') | float)}}
          {% elif is_state('binary_sensor.battery_discharging3', 'on') %}
            {{ (states('sensor.battery_power_raw3') | float * -1)}}
          {% else %}
            0
          {% endif %}

      - name: Battery charging power3 # positive if charging else zero
        unique_id: sg_battery_charging_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('binary_sensor.battery_charging3', 'unavailable')
          and not is_state('sensor.battery_power_raw3', 'unavailable')
          }}
        state: >-
          {% if is_state('binary_sensor.battery_charging3', 'on') %}
            {{ states('sensor.battery_power_raw3') }}
          {% else %}
            0
          {% endif %}

      - name: Battery discharging power3 # positive if discharging else zero
        unique_id: sg_battery_discharging_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{
          not is_state('binary_sensor.battery_discharging3', 'unavailable')
          and not is_state('sensor.battery_power_raw3', 'unavailable')
          }}
        state: >-
          {% if is_state('binary_sensor.battery_discharging3', 'on') %}
            {{ states('sensor.battery_power_raw3') }}
          {% else %}
            0
          {% endif %}

      - name: Import power3 # power from grid: positive if importing, else zero
        unique_id: sg_import_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ not is_state('sensor.export_power_raw3', 'unavailable') }}"
        state: >-
          {% if states('sensor.export_power_raw3')|int < 0 %}
            {{ states('sensor.export_power_raw3')|int *-1 }}
          {% else %}
            0
          {% endif %}

      - name: Export power3 # power to grid: positive if exporting, else zero
        unique_id: sg_export_power3
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ not is_state('sensor.export_power_raw3', 'unavailable') }}"
        state: >-
          {% if states('sensor.export_power_raw3')|int > 0 %}
            {{ states('sensor.export_power_raw3') }}
          {% else %}
            0
          {% endif %}

      - name: "Monthly PV generation (current)3"
        unique_id: sg_monthly_pv_generation_current3
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currMonth3 = 'monthly_pv_generation_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth3)|is_number }}
        state: >
          {% set currMonth3 = 'monthly_pv_generation_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth3) }}

      - name: "Yearly PV generation (current)3"
        unique_id: sg_yearly_pv_generation_current3
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currYear3 = 'yearly_pv_generation_' ~ now().year %}
          {{ states('sensor.' ~ currYear3)|is_number }}
        state: >
          {% set currYear3 = 'yearly_pv_generation_' ~ now().year %}
          {{ states('sensor.' ~ currYear3) }}

      - name: "Monthly export (current)3"
        unique_id: sg_monthly_export_current3
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currMonth3 = 'monthly_export_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth3)|is_number }}
        state: >
          {% set currMonth3 = 'monthly_export_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth3) }}

      - name: "Yearly export (current)3"
        unique_id: sg_yearly_export_current3
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currYear3 = 'yearly_export_' ~ now().year %}
          {{ states('sensor.' ~ currYear3)|is_number }}
        state: >
          {% set currYear3 = 'yearly_export_' ~ now().year %}
          {{ states('sensor.' ~ currYear3) }}

      - name: "Battery level (nominal)3"
        unique_id: sg_battery_level_nom3
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.battery_level3', 'unavailable')
          and not is_state('sensor.min_soc3', 'unavailable')
          and not is_state('sensor.max_soc3', 'unavailable')
          }}
        state: >-
          {% set soc_min3 = states('sensor.min_soc3') | float %}
          {% set soc_max3 = states('sensor.max_soc3') | float %}
          {% set soc_cur3 = states('sensor.battery_level3') | float %}
          {{
            ((soc_min3) + ((soc_max3 - soc_min3) * (soc_cur3 / 100))) | round(1)
          }}

      - name: "Battery charge (nominal)3"
        unique_id: sg_battery_charge_nom3
        unit_of_measurement: kWh
        device_class: energy_storage
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.battery_capacity3', 'unavailable')
          and not is_state('sensor.battery_level_nominal3', 'unavailable')
          }}
        state: >-
          {{
            ( states('sensor.battery_capacity3') | float *
            states('sensor.battery_level_nominal3') | float / 100 )| round(1)
          }}

      - name: "Battery charge3"
        unique_id: sg_battery_charge3
        unit_of_measurement: kWh
        device_class: energy_storage
        state_class: measurement
        availability: >-
          {{
          not is_state('sensor.battery_capacity3', 'unavailable')
          and not is_state('sensor.battery_level3', 'unavailable')
          and not is_state('sensor.min_soc3', 'unavailable')
          and not is_state('sensor.max_soc3', 'unavailable')
          }}
        state: >-
          {{
            ( states('sensor.battery_capacity3')|float
            * ( states('sensor.max_soc3')|float - states('sensor.min_soc3')|float ) /100
            * states('sensor.battery_level3')|float /100
            ) |round(2)
          }}

      - name: Daily consumed energy3
        unique_id: uid_daily_consumed_energy3
        unit_of_measurement: kWh
        device_class: energy
        # the state class is not total_increasing, because sometimes the read value are read at different times,
        # resulting in decreasing values.
        # "measurement" does not work, because it is incompatible with "energy"
        state_class: total
        availability: >-
          {{
          not is_state('sensor.daily_pv_generation3', 'unavailable')
          and not is_state('sensor.daily_exported_energy3', 'unavailable')
          and not is_state('sensor.daily_imported_energy3', 'unavailable')
          and not is_state('sensor.daily_battery_charge3', 'unavailable')
          and not is_state('sensor.daily_battery_discharge3', 'unavailable')
          }}
        state: >-
          {{
            (
              states('sensor.daily_pv_generation3')|float
              - states('sensor.daily_exported_energy3')|float
              + states('sensor.daily_imported_energy3')|float
              - states('sensor.daily_battery_charge3')|float
              + states('sensor.daily_battery_discharge3')|float
            )
          }}

      - name: Total consumed energy3
        unique_id: uid_total_consumed_energy3
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        availability: >-
          {{
          not is_state('sensor.total_pv_generation3', 'unavailable')
          and not is_state('sensor.total_exported_energy3', 'unavailable')
          and not is_state('sensor.total_imported_energy3', 'unavailable')
          and not is_state('sensor.total_battery_charge3', 'unavailable')
          and not is_state('sensor.total_battery_discharge3', 'unavailable')
          }}
        state: >-
          {{
            (
              states('sensor.total_pv_generation3')|float
              - states('sensor.total_exported_energy3')|float
              + states('sensor.total_imported_energy3')|float
              - states('sensor.total_battery_charge3')|float
              + states('sensor.total_battery_discharge3')|float
            )|int
          }}

# getting input for Min and Max SoC
input_number:
  set_sg_min_soc3:
    name: Set min SoC3
    min: 0
    max: 50
    step: 1

  set_sg_max_soc3:
    name: Set max SoC3
    min: 50
    max: 100
    step: 1

  # set_sg_reserved_soc_for_backup3:
  #   name: Set reserved SoC for backup3
  #   min: 0
  #   max: 100
  #   step: 1

  set_sg_forced_charge_discharge_power3:
    name: Set forced charge discharge power3 in W
    min: 0
    max: 5000 # change this value according to the capability of your battery
    step: 100

  set_sg_battery_max_charge_power3:
    name: Set max battery charge power3 in W
    min: 100
    max: 5000 # change this value according to the capability of your battery
    step: 100

  set_sg_battery_max_discharge_power3:
    name: Set max battery discharge power3 in W
    min: 100
    max: 5000 # change this value according to the capability of your battery
    step: 100

  # This threshold is compared against the currently achievable charging power, not just against the currently available surplus.
  # If this is set higher than the maximum charging power of the battery, charging will not start.
  # If currently achievable charging power drops below this threshold, charging will stop. Actual charging power (limited by register 33047) is ignored.
  # Charging might stop before reaching 100% if set too close to the maximum charging power of the battery, due to achievable charging power naturally dropping at high state of charge.
  set_sg_battery_charging_start_power3:
    name: Set battery charging start power3 in W
    min: 0
    max: 1000
    step: 10

  set_sg_battery_discharging_start_power3:
    name: Set battery discharging start power3 in W
    min: 0
    max: 1000
    step: 10

  set_sg_export_power_limit3:
    name: Set export power limit3
    min: 0
    max: 10000 # Note: max for SH10.RT. It would be nice to have this as a global variable /secret
    step: 100

input_select:
  set_sg_inverter_run_mode3:
    name: Inverter mode3
    options:
      - "Enabled"
      - "Shutdown"

  # get input for battery mode (forced charge/discharge, stop (default) )
  set_sg_ems_mode3:
    name: EMS mode3
    options:
      - "Self-consumption mode (default)"
      - "Forced mode"
      - "External EMS" # required for multiple inverters main /follower?
    # these are commented, because they are rarely used
    #      - "VPP"
    #      - "MicroGrid"
    icon: mdi:battery-unknown

  set_sg_battery_forced_charge_discharge_cmd3:
    name: Battery forced charge discharge cmd3
    options:
      - "Stop (default)"
      - "Forced charge"
      - "Forced discharge"
    icon: mdi:battery-unknown

  set_sg_export_power_limit_mode3:
    name: Export power limit mode3
    options:
      - "Enabled"
      - "Disabled"
    icon: mdi:export

  set_sg_global_mpp_scan_manual3:
    name: Global mpp scan manual3
    options:
      - "Enabled"
      - "Disabled"
    icon: mdi:export

# Automations: Write modbus registers on input changes via GUI
# note: If you change a value by the sliders, it will take up to 60 seconds until the state variables are updated
# Unfortunately, I could not find a way to "force update" modbus registers, yet...
automation:
  - id: "automation_sungrow_inverter_state3"
    alias: "sungrow inverter state3"
    description: "Enables/ stops the inverter"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_inverter_run_mode3
    condition: []
    variables:
      sg_start: 0xCF
      sg_stop: 0xCE
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 12999 # reg 13000
          value: >
            {% if is_state('input_select.set_sg_inverter_run_mode3', "Enabled") %}
              {{sg_start}}
            {% else %}
              {{sg_stop}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_state_input_selector_update3"
    alias: "sungrow inverter enable/ stop input selector update3"
    description: "Updates enable/ stops input selector"
    trigger:
      - platform: state
        entity_id:
          - sensor.sungrow_inverter_state3
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.sungrow_inverter_state3', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_inverter_run_mode3
        data:
          option: >
            {% if is_state('sensor.sungrow_inverter_state3', "Stop") %}
              Shutdown
            {% else %}
              Enabled
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_update_max_soc3"
    alias: "sungrow inverter update max SoC3"
    description: "Updates Sungrow max Soc holding register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_max_soc3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 13057 # reg 13058
          value: "{{ states('input_number.set_sg_max_soc3') | int *10}}"
    mode: single

  - id: "automation_sungrow_inverter_update_max_soc_input_slider_update3"
    alias: "sungrow inverter max SoC input slider update3"
    description: "Updates Sungrow max Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.max_soc3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_max_soc3
        data:
          value: "{{ states('sensor.max_soc3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_min_soc3"
    alias: "sungrow inverter update min SoC3"
    description: "Updates Sungrow min Soc holding register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_min_soc3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 13058 # reg 13059
          value: "{{ states('input_number.set_sg_min_soc3') | int *10}}"
    mode: single

  - id: "automation_sungrow_inverter_update_min_soc_input_slider_update3"
    alias: "sungrow inverter min SoC input slider update3"
    description: "Updates Sungrow min Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.min_soc3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_min_soc3
        data:
          value: "{{ states('sensor.min_soc3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_reserved_soc_for_backup3"
    alias: "sungrow inverter update reserved soc for backup3"
    description: "Updates reserved SoC for backup register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_reserved_soc_for_backup3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 13099 # reg 13100
          value: "{{ states('input_number.set_sg_reserved_soc_for_backup3') | int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_reserved_backup_soc_input_slider_update3"
    alias: "sungrow inverter reserved backup SoC input slider update3"
    description: "Updates Sungrow reserved backup Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.reserved_soc_for_backup3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_reserved_soc_for_backup3
        data:
          value: "{{ states('sensor.reserved_soc_for_backup3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_cmd3"
    alias: "sungrow inverter update battery forced charge discharge cmd3"
    description: "Updates Sungrow holding register for battery forced charge discharge command"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_battery_forced_charge_discharge_cmd3
    condition: []
    variables:
      ems_forced_charge: 0xAA
      ems_forced_discharge: 0xBB
      ems_stop_default: 0xCC
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 13050 # reg 13051
          value: >
            {% if is_state('input_select.set_sg_battery_forced_charge_discharge_cmd3', "Stop (default)") %}
              {{ems_stop_default}}
            {% elif is_state('input_select.set_sg_battery_forced_charge_discharge_cmd3', "Forced charge") %}
              {{ems_forced_charge}}
            {% elif is_state('input_select.set_sg_battery_forced_charge_discharge_cmd3', "Forced discharge") %}
              {{ems_forced_discharge}}
            {% else %}
              {{ems_stop_default}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_cmd_input_select_update3"
    alias: "sungrow inverter update battery forced charge discharge cmd input select update3"
    description: "Updates Sungrow battery forced charge discharge cmd input select"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_forced_charge_discharge_cmd3
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.battery_forced_charge_discharge_cmd3', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd3
        data:
          option: "{{ states('sensor.battery_forced_charge_discharge_cmd3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_ems_mode3"
    alias: "sungrow inverter update EMS mode3"
    description: "Updates EMS mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_ems_mode3
    condition: []
    variables:
      ems_mode_self_consume: 0
      ems_mode_forced: 2
      ems_mode_external: 3
      ems_mode_vpp: 4
      ems_mode_microgrid: 8
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 13049 # reg 13050
          value: >
            {% if is_state('input_select.set_sg_ems_mode3', "Self-consumption mode (default)") %}
              {{ems_mode_self_consume}}
            {% elif is_state('input_select.set_sg_ems_mode3', "Forced mode") %}
              {{ems_mode_forced}}
            {% elif is_state('input_select.set_sg_ems_mode3', "External EMS") %}
              {{ems_mode_external}}
            {% elif is_state('input_select.set_sg_ems_mode3', "VPP") %}
              {{ems_mode_vpp}}
            {% elif is_state('input_select.set_sg_ems_mode3', "MicroGrid") %}
              {{ems_mode_microgrid}}
            {% else %}
              {{ems_mode_self_consume}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_export_power_limit_mode_update3"
    alias: "sungrow inverter export power limit mode update3"
    description: "Updates Enable/Disable for export power limit mode"
    trigger:
      - platform: state
        entity_id:
          - sensor.export_power_limit_mode_raw3
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.export_power_limit_mode_raw3', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_export_power_limit_mode3
        data:
          option: >
            {% if ((states('sensor.export_power_limit_mode_raw3') |int) == 0x00AA) %}
              Enabled
            {% elif ((states('sensor.export_power_limit_mode_raw3') |int) == 0x0055) %}
              Disabled
            {% endif %}
    mode: single

  - id: "automation_sungrow_export_power_limit_mode3"
    alias: "sungrow inverter export power limit mode3"
    description: "Set export power limit mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_export_power_limit_mode3
    condition: []
    variables:
      export_limit_enable: 0xAA
      export_limit_disable: 0x55
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 13086 # reg 13087
          value: >
            {% if is_state('input_select.set_sg_export_power_limit_mode3', "Enabled") %}
              {{export_limit_enable}}
            {% elif is_state('input_select.set_sg_export_power_limit_mode3', "Disabled") %}
              {{export_limit_disable}}
            {% else %}
              {{export_limit_disable}}
            {% endif %}
    mode: single

  - id: "automation_sungrow_inverter_export_power_limit_update3"
    alias: "sungrow inverter export power limit update3"
    description: "Updates export power limit slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.export_power_limit3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_export_power_limit3
        data:
          value: "{{ states('sensor.export_power_limit3') }}"
    mode: single

  - id: "automation_sungrow_inverter_set_export_power_limit3"
    alias: "sungrow inverter export power limit3"
    description: "Sets export power limit"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_export_power_limit3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 13073 # reg 13074
          value: "{{ states('input_number.set_sg_export_power_limit3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_ems_mode_input_select_update3"
    alias: "sungrow inverter update EMS mode input select update3"
    description: "Updates EMS mode input select"
    trigger:
      - platform: state
        entity_id:
          - sensor.ems_mode_selection3
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.ems_mode_selection3', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_ems_mode3
        data:
          option: "{{ states('sensor.ems_mode_selection3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_power3"
    alias: "sungrow inverter update battery forced charge discharge power3"
    description: "Sets battery forced charge discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_forced_charge_discharge_power3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 13051 # reg 13052
          value: "{{ states('input_number.set_sg_forced_charge_discharge_power3') | int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_forced_charge_discharge_power_input_slider_update3"
    alias: "sungrow inverter update battery forced charge discharge power input slider update3"
    description: "Updates battery forced charge discharge power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_forced_charge_discharge_power3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_forced_charge_discharge_power3
        data:
          value: "{{ states('sensor.battery_forced_charge_discharge_power3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_charge_power3"
    alias: "sungrow inverter update battery max charge power3"
    description: "Sets battery max charge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_battery_max_charge_power3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 33046 # reg 33047
          value: "{{ states('input_number.set_sg_battery_max_charge_power3') |float /10 |int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_charge_power_input_slider_update3"
    alias: "sungrow inverter update battery max charge power input slider update3"
    description: "Updates battery max charge power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_max_charge_power3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_battery_max_charge_power3
        data:
          value: "{{ states('sensor.battery_max_charge_power3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_discharge_power3"
    alias: "sungrow inverter update battery max discharge power3"
    description: "Sets battery max discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_battery_max_discharge_power3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 33047 # reg 33048
          value: "{{ states('input_number.set_sg_battery_max_discharge_power3')  |float /10 |int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_max_discharge_power_input_slider_update3"
    alias: "sungrow inverter update battery max discharge power input slider update3"
    description: "Updates battery max discharge power input slider3"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_max_discharge_power3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_battery_max_discharge_power3
        data:
          value: "{{ states('sensor.battery_max_discharge_power3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_charging_start_power3"
    alias: "sungrow inverter update battery charging start power3"
    description: "Sets battery charging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_battery_charging_start_power3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 33148 # reg 33149
          value: "{{ states('input_number.set_sg_battery_charging_start_power3') |float /10 |int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_charging_start_power_input_slider_update3"
    alias: "sungrow inverter update battery charging start power input slider update3"
    description: "Updates battery charging start power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_charging_start_power3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_battery_charging_start_power3
        data:
          value: "{{ states('sensor.battery_charging_start_power3') }}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_discharging_start_power3"
    alias: "sungrow inverter update battery discharging start power3"
    description: "Sets battery discharging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_sg_battery_discharging_start_power3
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 33149 # reg 33150
          value: "{{ states('input_number.set_sg_battery_discharging_start_power3') |float /10 | int}}"
    mode: single

  - id: "automation_sungrow_inverter_update_battery_discharging_start_power_input_slider_update3"
    alias: "sungrow inverter update battery discharging start power input slider update3"
    description: "Updates battery discharging start power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_discharging_start_power3
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_sg_battery_discharging_start_power3
        data:
          value: "{{ states('sensor.battery_discharging_start_power3') }}"
    mode: single

  - id: "automation_sungrow_inverter_global_mpp_scan_manual_update3"
    alias: "sungrow inverter global mpp scan manual update3"
    description: "Updates Enable/Disable for global mpp scan manual"
    trigger:
      - platform: state
        entity_id:
          - sensor.global_mpp_scan_manual_raw3
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.global_mpp_scan_manual_raw3', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_sg_global_mpp_scan_manual3
        data:
          option: >
            {% if ((states('sensor.global_mpp_scan_manual_raw3') | int(default=0)) == 0x00AA) %}
              Enabled
            {% elif ((states('sensor.global_mpp_scan_manual_raw3') | int(default=0)) == 0x0055) %}
              Disabled
            {% endif %}
    mode: single

  - id: "automation_sungrow_global_mpp_scan_manual3"
    alias: "sungrow inverter global mpp scan manual3"
    description: "Set global mpp scan manual"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_sg_global_mpp_scan_manual3
    condition: []
    variables:
      export_limit_enable: 0xAA
      export_limit_disable: 0x55
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx3
          slave: !secret sungrow_modbus_slave3
          address: 30229 # reg 30230
          value: >
            {% if is_state('input_select.set_sg_global_mpp_scan_manual3', "Enabled") %}
              {{export_limit_enable}}
            {% elif is_state('input_select.set_sg_global_mpp_scan_manual3', "Disabled") %}
              {{export_limit_disable}}
            {% else %}
              {{export_limit_disable}}
            {% endif %}
    mode: single

# Usage: Use these scripts to simplify automations
# Example (Adjust to your needs with appropriate trigger):
# automation:
#  - alias: Forced Battery Charging Management
#    description: "Manages forced battery charging during cheapest hours."
#   trigger:
#      - platform: state
#        entity_id:
#          - binary_sensor.cheapest_hours_for_charging_timer
#    action:
#      - choose:
#          - conditions:
#              - condition: state
#                entity_id: binary_sensor.cheapest_hours_for_charging_timer
#                state: 'on'
#            sequence:
#              - service: script.sg_forced_charge_battery_mode
#          - conditions:
#              - condition: state
#                entity_id: binary_sensor.cheapest_hours_for_charging_timer
#                state: 'off'
#            sequence:
#              - service: script.sg_self_consumption_mode

script:
  sg_set_forced_discharge_battery_mode3:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_ems_mode3
          option: "Forced mode"
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd3
          option: "Forced discharge"
      # Uncomment notify action lines below for push notifications to mobile devices
      # - service: notify.notify
      #   data:
      #     title: "Forced Battery Discharge"
      #     message: "Switched to Forced Battery Discharge mode"

  sg_set_forced_charge_battery_mode3:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_ems_mode3
          option: "Forced mode"
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd3
          option: "Forced charge"

  sg_set_battery_bypass_mode3:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_ems_mode3
          option: "Forced mode"
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd3
          option: "Stop (default)"

  sg_set_self_consumption_mode3:
    sequence:
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_ems_mode3
          option: "Self-consumption mode (default)"
      - service: input_select.select_option
        data:
          entity_id: input_select.set_sg_battery_forced_charge_discharge_cmd3
          option: "Stop (default)"
